# Groups

A Group is a collection of [Group Members](#group-members).

## <%= OBJECTS %>

### Group Object

> Example Group Object:

```json
{
  "id": 4583173393803140,
  "name": "Group 1",
  "description": "My group",
  "owner": "john.doe@smartsheet.com",
  "ownerId": 2331373580117892,
  "members": [],
  "createdAt": "2014-05-29T14:41:35-07:00",
  "modifiedAt": "2014-05-29T14:41:35-07:00"
}
```

     |     |     |
-----|-----|-----|
**id** | number | Group Id
**name** | string | Group name
**description** | string | Group description
**owner** | string | Group ownerâ€™s email address
**ownerId** | number | Group owner's User Id
**members** | [GroupMember](#groupmember-object)[] | Array of GroupMember Objects
**createdAt** | timestamp | Time of creation
**modifiedAt** | timestamp | Time of last modification

## Create Group

> Example Request: Create Group

```shell
curl https://api.smartsheet.com/2.0/groups \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json" \
-X POST \
-d '{ "name": "API-created Group", "description": "Group created via API", "members": [{ "email": "john.doe@smartsheet.com" }]}'
```

```javascript
// Specify group
var group = {
  "name": "API-created Group",
  "description": "Group created via API",
  "members": [
    {
      "email": "john.doe@smartsheet.com"
    }
  ]
};

// Set options
var options = {
  body: group
};

// Create group
smartsheet.groups.createGroup(options)
  .then(function(newGroup) {
    console.log(newGroup);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create group member
GroupMember memberSpecification = new GroupMember { Email = "john.doe@smartsheet.com" };

// Add member to group
Group groupSpecification = new Group
{
  Name = "API-created Group",
  Description = "Group created via API",
  Members = new GroupMember[] { memberSpecification }
};

// Create group
Group newGroup = smartsheet.GroupResources.CreateGroup(groupSpecification);
```

```java
// Create group member
GroupMember memberSpecification = new GroupMember();
memberSpecification.setEmail("john.doe@smartsheet.com");

// Add member to group
Group groupSpecification = new Group();
groupSpecification.setDescription("Group created via API")
  .setMembers(Arrays.asList(memberSpecification))
  .setName("API-created Group");

// Create group
Group newGroup = smartsheet.groupResources().createGroup(groupSpecification);
```

```python
new_group = ss_client.Groups.create_group(
  ss_client.models.Group({
    'name': 'API-created Group',
    'description': 'Group created via API',
    'members': ss_client.models.GroupMember({
      'email': 'john.doe@smartsheet.com'
    })
  })
)
```

```ruby
# List members of group
body = {
  name: 'API-created Group',
  description: 'Group created via API',
  members: [
    {
      email: 'john.doe@smartsheet.com'
    }
  ]
}

# Create group
new_group = smartsheet.groups.create(
  body: body
)
```

> Example Response:

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": {
		"id": 2331373580117892,
		"name": "API-created Group",
		"description": "Group created via API",
		"owner": "john.doe@smartsheet.com",
		"ownerId": 4583173393803140,
		"members": [{
			"id": 4583173393803140,
			"email": "john.doe@smartsheet.com",
			"firstName": "John",
			"lastName": "Doe",
			"name": "John Doe"
		}],
		"createdAt": "2014-05-29T16:28:49-07:00",
		"modifiedAt": "2014-05-29T16:28:49-07:00"
	}
}
```

`POST /groups`

Creates a new Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Group Object](#group-object), limited to the following attributes:<ul><li>name (required) -- must be unique within the organization</li><li>description (optional)</li><li>members (optional) -- array of [GroupMember Objects](#groupmember-object), each limited to the following attribute:<ul><li>email</li></ul></li></ul>
<%= RETURNS %> | [Result Object](#result-object), containing a [Group Object](#group-object) for the newly created Group

## Delete Group

> Example Request: Delete Group

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  id: 6932724448552836 // Id of Group
};

// Delete group
smartsheet.groups.deleteGroup(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.GroupResources.DeleteGroup(
  6932724448552836            // long groupId
);
```

```java
smartsheet.groupResources().deleteGroup(
  6932724448552836L        // long groupId
);
```

```python
ss_client.Groups.delete_group(
    6932724448552836)       # group_id
```

```ruby
smartsheet.groups.delete(
  group_id: 4583173393803140
)
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /groups/{groupId}`

Deletes the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Get Group

> Example Request: Get Group

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  id: 6932724448552836 // Id of Group
};

// Get group
smartsheet.groups.getGroup(options)
  .then(function(group) {
    console.log(group);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Group group = smartsheet.GroupResources.GetGroup(
  6932724448552836            // long groupId
);
```

```java
Group group = smartsheet.groupResources().getGroup(
  6932724448552836L        // long groupId
);
```

```python
group = ss_client.Groups.get_group(
  6932724448552836)       # group_id
# group is an instance of ss_client.models.Group
```

```ruby
group = smartsheet.groups.get(
  group_id: 6932724448552836
)
```

> Example Response:

```json
{
  "id": 6932724448552836,
  "name": "Group 1",
  "description": "My group",
  "owner": "john.doe@smartsheet.com",
  "ownerId": 2331373580117892,
  "members": [
    {
      "id": 2331373580117892,
      "email": "john.doe@smartsheet.com",
      "firstName": "John",
      "lastName": "Doe",
      "name": "John Doe"
    },
  ],
  "createdAt": "2014-05-29T14:41:35-07:00",
  "modifiedAt": "2014-05-29T14:41:35-07:00"
}
```

`GET /groups/{groupId}`

Gets the Group specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Group Object](#group-object) that includes the list of [GroupMembers](#groupmember-object)

## List Org Groups

> Example Request: List Org Groups

```shell
curl https://api.smartsheet.com/2.0/groups \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.groups.listGroups()
  .then(function(groupList) {
    console.log(groupList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Group> groups = smartsheet.GroupResources.ListGroups(
  null                    // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Group> groups = smartsheet.groupResources().listGroups(
  null        // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Groups.list_groups(include_all=True)
groups = response.data

# Sample 2: Paginate the list
response = ss_client.Groups.list_groups(
  page_size=10,
  page=1)
pages = response.total_pages
groups = response.data
```

```ruby
response = smartsheet.groups.list
groups = response[:data]
```

> Example Response:

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 1,
  "data": [
    {
      "id": 4583173393803140,
      "name": "Group 1",
      "description": "My group",
      "owner": "john.doe@smartsheet.com",
      "ownerId": 2331373580117892,
      "createdAt": "2014-05-29T14:41:35-07:00",
      "modifiedAt": "2014-05-29T14:41:35-07:00"
    }
  ]
}
```

`GET /groups`

Gets a list of all Groups in an organization. To fetch the members of an individual group, use the [Get Group](#get-group) operation.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Group Objects](#group-object)

## Update Group

> Example Request: Update Group

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{ "name": "Renamed Group", "description": "Some new description" }'
```

```javascript
// Specify the name and description of the group
var group = {
  "name": "Renamed Group",
  "description": "Some new description"
};

// Set options
var options = {
  id: 2331373580117892, // Id of Group
  body: group
  };

// Update group
smartsheet.groups.updateGroup(options)
  .then(function(updatedGroup) {
    console.log(updatedGroup);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify the name and description of the group
Group groupSpecification = new Group
{
  Id = 2331373580117892,
  Name = "Renamed Group",
  Description = "Some new description"
};

// Update group
Group updatedGroup = smartsheet.GroupResources.UpdateGroup(groupSpecification);
```

```java
// Specify the name and description of the group
Group groupSpecification = new Group(2331373580117892L);
groupSpecification.setDescription("Some new description")
  .setName("Renamed Group");
        
// Update group
Group updatedGroup = smartsheet.groupResources().updateGroup(groupSpecification);
```

```python
updated_group = ss_client.Groups.update_group(
  2331373580117892,       # group_id
  ss_client.models.Group({
    'name': 'Renamed Group',
    'description': 'Some new description'
  })
)
```

```ruby
# Specify the name and description of the group
body = {
  name: 'Renamed Group',
  description: 'Some new description',
  owner_id: 4583173393803140
}

# Update group
updated_group = smartsheet.groups.update(
  group_id: 2331373580117892,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 2331373580117892,
    "name": "Renamed Group",
    "description": "Some new description",
    "owner": "john.doe@smartsheet.com",
    "ownerId": 4583173393803140,
    "createdAt": "2014-05-29T16:28:49-07:00",
    "modifiedAt": "2014-05-29T17:00:23-07:00"
  }
}
```

`PUT /groups/{groupId}`

Updates the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Group Object](#group-object), limited to the following attributes:<ul><li>name (optional) -- must be unique within the organization</li><li>description (optional)</li><li>ownerId (optional): Id of an admin User to whom the group ownership is transferred</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing the [Group Object](#group-object) for the updated group

## <%= RELATED %>

A Group is comprised of one or more members.

### Members of a Group

For details about working with a Group's members, see [Group Members](#group-members).

# Group Members

A Group Member is a User that belongs to a [Group](#groups).

## <%= OBJECTS %>

> Example GroupMember Object

```json
{
  "id": 2331373580117892,
  "email": "john.doe@smartsheet.com",
  "firstName": "John",
  "lastName": "Doe",
  "name": "John Doe"
}
```

### GroupMember Object

     |     |     |
-----|-----|-----|
**id** | number | Group Member's User Id
**email** | string | Group Member's email address
**firstName** | string | Group Member's first name
**lastName** | string | Group Member's last name
**name** | string | Group Member's full name

## Add Group Members

> Example Request: Add Group Members

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId}/members \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json" \
-X POST \
-d '[{ "email": "jane.doe@smartsheet.com" }]'
```

```javascript
// Specify group members
var members = [{ "email": "jane.doe@smartsheet.com" }];

// Set options
var options = {
  groupId: 7917992160847748,
  body: members
  };

// Add members to group
smartsheet.groups.addGroupMembers(options)
  .then(function(newMembers) {
    console.log(newMembers);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create group member
GroupMember memberSpecification = new GroupMember { Email = "jane.doe@smartsheet.com" };

// Add members to group
IList<GroupMember> newMembers = smartsheet.GroupResources.AddGroupMembers(
  7917992160847748,           // long groupId
  new GroupMember[] { memberSpecification }
);
```

```java
// Create group member
GroupMember memberSpecification = new GroupMember();
memberSpecification.setEmail("jane.doe@smartsheet.com");

// Add members to group
List<GroupMember> newMembers = smartsheet.groupResources().memberResources().addGroupMembers(
  7917992160847748L,       // long groupId
  Arrays.asList(memberSpecification)
);
```

```python
new_members = ss_client.Groups.add_members(
  7917992160847748,       # group_id
  [ss_client.models.GroupMember({'email': 'jane.doe@smartsheet.com'})]
)
```

```ruby
body = {
  email: 'jane.doe@smartsheet.com'
}

new_members = smartsheet.groups.add_members(
  group_id: 7917992160847748,
  body: body
)
```

> Example Response:

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
		"id": 1539725208119172,
		"email": "jane.doe@smartsheet.com",
		"firstName": "Jane",
		"lastName": "Doe",
		"name": "Jane Doe"
	}]
}
```

`POST /groups/{groupId}/members`

Adds one or more members to a Group.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

If called with a single [GroupMember Object](#groupmember-object), and that group member already exists, [error code](#complete-error-code-list) **1129** is returned. If called with an array
of [GroupMember Objects](#groupmember-object) any users specified in the array that are already group members are ignored and omitted from the response.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A single [GroupMember Object](#groupmember-object) or an array of GroupMember Objects, limited to the following attribute:<ul><li>email</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing the members added to the group -- either a single [GroupMember](#groupmember-object) or array of GroupMember Objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-addresses) (that is, not the primary email address associated with the User account), the [Error Object](#error-object) returned contains a **detail** attribute set to an array of objects, each object in the array has the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry using their primary address u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

<aside class="notice"><b>This operation is asynchronous</b>, meaning the users may not yet have sharing access to sheets for a period of time after this operation returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Remove Group Member

> Example Request: Remove Group Member

```shell
curl https://api.smartsheet.com/2.0/groups/{groupId}/members/{userId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  groupId: 7917992160847748,
  userId: 1539725208119172
};

// Remove member from group
smartsheet.groups.removeGroupMember(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.GroupResources.RemoveGroupMember(
  7917992160847748,           // long groupId
  1539725208119172            // long userId
);
```

```java
smartsheet.groupResources().memberResources().deleteGroupMember(
  7917992160847748L,       // long groupId
  1539725208119172L)       // long userId
);
```

```python
ss_client.Groups.remove_member(
  7917992160847748,       # group_id
  1539725208119172)       # group_member_id
```

```ruby
smartsheet.groups.remove_member(
  group_id: 4583173393803140,
  user_id: 48569348493401200
)
```

> Example Response:

```json
{
    "message": "SUCCESS",
    "resultCode": 0
}
```

`DELETE /groups/{groupId}/members/{userId}`

Removes a member from a Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

# Home

In the Smartsheet UI, the "Home" tab shows all objects a User has access to, including Sheets, Folders, Workspaces, Reports, and Templates.

## <%= OBJECTS %>

### Home Object

> Example Home Object:

```json
{
  "folders": [],
  "sheets": [],
  "reports": [],
  "templates": [],
  "workspaces": [],
  "sights": []
}
```

     |     |     |
-----|-----|-----|
**sheets** | [Sheet](#sheet-object)[] | Array of Sheet Objects
**folders** | [Folder](#folder-object)[] | Array of Folder Objects
**reports** | [Report](#report-object)[] | Array of Report Objects
**sights** | [Sight](#sight-object)[] | Array of Sight Objects
**templates** | [Template](#template-object)[] | Array of Template Objects
**workspaces** | [Workspace](#workspace-object)[] | Array of Workspace Objects


## List Contents

> Example Request: List Contents

```shell
curl 'https://api.smartsheet.com/2.0/home?include=source' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.home.listContents()
  .then(function(contents) {
    console.log(contents);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameters
Home home = smartsheet.HomeResources.GetHome(
  null                // IEnumerable<HomeInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "SOURCE"
Home home = smartsheet.HomeResources.GetHome(
  new HomeInclusion[] { HomeInclusion.SOURCE }
);
```

```java
// Sample 1: Omit 'include' parameter
Home home = smartsheet.homeResources().getHome(
  null            // EnumSet<SourceInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "SOURCE"
Home home = smartsheet.homeResources().getHome(EnumSet.of(SourceInclusion.SOURCE)));
```

```python
contents = ss_client.Home.list_all_contents(include='source')
```

```ruby
contents = smartsheet.home.list
```

> Example Response:

```json
{
  "folders": [
    {
      "id": 5709073300645764,
      "name": "folder 1",
      "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Z1"
    }
  ],
  "sheets": [
    {
      "id": 4583173393803140,
      "name": "sheet 1",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Za", 
      "createdAt": "2015-06-05T20:05:29Z",
      "modifiedAt": "2015-06-05T20:05:43Z"
    },
    {
      "id": 2331373580117892,
      "name": "Copy of sheet 1",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=Dsje3YKtpyZScrCX6Zb",
      "createdAt": "2015-06-05T20:05:29Z",
      "modifiedAt": "2015-06-05T20:05:43Z",
      "source": {
        "id": 4583173393803140,
        "type": "sheet"
        }
      }
  ],
  "reports": [],
  "templates": [],
  "workspaces": [],
  "sights": []
}
```

`GET /home`

Gets a nested list of all Home Objects, including Sheets, Workspaces, Folders, Reports, Templates, and Sights, as shown on the Home tab.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
  | **exclude** (optional) -- a comma-separated list of optional elements to <i>not include</i> in the response.<br/><ul><li>permalinks - excludes the permalink from each data object</li></ul> 
<%= RETURNS %> | [Home Object](#home-object), populated according to the **include** parameter

## <%= RELATED %>

### Home Folders

For details about working with Folders in the user's **Sheets** folder (that is, at the Home level), see [Folders](#folders).

### Home Sheets

For details about working with sheets in the user's **Sheets** folder (that is, at the Home level), see [Sheets](#sheets).

# Reports

A Report is a filtered view of the data from one or more Sheets. Like a Sheet, a Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Report Object

> Example Report Object:

```json
{
  "id": 4583173393803140,
  "name": "My Report",
  "totalRowCount": 4,
  "accessLevel": "OWNER",
  "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
  "createdAt": "2012-07-24T18:22:29-07:00",
  "modifiedAt": "2012-07-24T18:30:52-07:00",
  "columns": [],
  "rows": []
}
```

Extends the [Sheet Object](#sheet-object), adding the following:

     |     |     |
-----|-----|-----|
**sourceSheets** | [Sheet](#sheet-object)[] | Array of Sheet Objects (without rows), representing the sheets that rows in the report originated from.  Only included in the [Get Report](#get-report) response if the **include** parameter specifies "sourceSheets".

### ReportCell Object

Extends the [Cell Object](#cell-object), adding the following: 

     |     |     |
-----|-----|-----|
**virtualColumnId** | number | The virtual Id of the cell's column. This property refers to the cell's parent column in the Report, while the **columnId** property refers to the cell's parent column in its originating source Sheet.


### ReportColumn Object

Extends the [Column Object](#column-object), adding the following: 

     |     |     |
-----|-----|-----|
**virtualId** | number | The virtual Id of this report column
**sheetNameColumn** | Boolean | Returned only for the special "Sheet Name" report column (value = 'true')

A report column is a "virtual" column, in that it appears identical to source sheet columns, but is in fact a different column belonging to the report. 
[Cells](#reportcell-object) in the report refer to this column via their **virtualColumnId** attribute, and to their actual column from their source sheet via their **columnId** attribute.

### ReportRow Object

Extends the [Row Object](#row-object), adding the following: 

     |     |     |
-----|-----|-----|
**sheetId** | number | The Id of the Sheet from which the Row originates

### ReportPublish Object 

     |     |     |
-----|-----|-----|
**readOnlyFullEnabled** | Boolean | (Required) If `true`, a rich version of the report is published with the ability to download row attachments and discussions.
**readOnlyFullAccessibleBy** | string | Indicates who can access the 'Read-Only Full' view of the published report:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the report owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
**readOnlyFullDefaultView** | string | Indicates which view the user has set for a read-only, default view of the published report. Must be one of the following values: "CALENDAR", "CARD", or "GRID".
**readOnlyFullShowToolbar** | Boolean | Indicates whether the left nav toolbar is displayed. The default, or `true`, is to display the toolbar. If `false`, hides the toolbar.
**readOnlyFullUrl** | string | URL for 'Read-Only Full' view of the published report<br/>Only returned in a response if **readOnlyFullEnabled** = true.

## Get Report

> Example Request: Get Report

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  id: 4583173393803140 // Id of Report
};

// Get report
smartsheet.reports.getReport(options)
  .then(function(report) {
    console.log(report);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include', 'pageSize', and 'page' parameters
Report report = smartsheet.ReportResources.GetReport(
  4583173393803140,           // long reportId
  null,                       // IEnumerable<ReportInclusion> include
  null,                       // int pageSize
  null                        // int page
);

// Sample 2: Specify 'include' parameter with value of "ATTACHMENTS" and "DISCUSSIONS", 'pageSize' parameter with value of "500", and 'page' of value "2"
Report report = smartsheet.ReportResources.GetReport(
  4583173393803140,           // long reportId
  new ReportInclusion[] {
    ReportInclusion.ATTACHMENTS,
    ReportInclusion.DISCUSSIONS
  },
  500,                        // int pageSize
  2                           // int page
);
```

```java
// Sample 1: Omit 'include', 'pageSize', and 'page' parameters
Report report = smartsheet.reportResources().getReport(
  4583173393803140L,      // long reportId
  null,                   // EnumSet<ReportInclusion> includes
  null,                   // int pageSize
  null                    // int page
);

// Sample 2: Specify 'include' parameter with value of "ATTACHMENTS" and "DISCUSSIONS", 'pageSize' parameter with value of "500", and 'page' of value "2"
Report report = smartsheet.reportResources().getReport(
  4583173393803140L,      // long reportId
  EnumSet.of(
    ReportInclusion.ATTACHMENTS,
    ReportInclusion.DISCUSSIONS),
  500,                    // int pageSize
  2                       // int page
);
```

```python
report = ss_client.Reports.get_report(
  4583173393803140)       # report_id
```

```ruby
report = smartsheet.reports.get(
  report_id: 4583173393803140
)
```

> Example Response:

```json
{
  "id": 4583173393803140,
  "name": "My Report",
  "totalRowCount": 4,
  "accessLevel": "OWNER",
  "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
  "createdAt": "2012-07-24T18:22:29-07:00",
  "modifiedAt": "2012-07-24T18:30:52-07:00",
  "columns": [
    {
      "virtualId": 4583173393803140,
      "index": 0,
      "primary": true,
      "title": "Sheet Name",
      "type": "TEXT_NUMBER",
      "validation": false,
      "sheetNameColumn": true
    },
    {
      "virtualId": 2331373580117892,
      "index": 1,
      "title": "Status",
      "type": "TEXT_NUMBER",
      "validation": false
    }
  ],
  "rows": [
    {
      "id": 1732835527681924,
      "sheetId": 1060338138408836,
      "rowNumber": 1,
      "expanded": true,
      "accessLevel": "OWNER",
      "createdAt": "2014-10-02T15:05:35-07:00",
      "modifiedAt": "2014-10-02T15:05:35-07:00",
      "cells": [
        {
          "virtualColumnId": 4583173393803140,
          "type": "TEXT_NUMBER",
          "value": "My Sheet",
          "displayValue": "My Sheet"
        },
        {
          "columnId": 8467747974735748,
          "virtualColumnId": 2331373580117892,
          "type": "TEXT_NUMBER",
          "value": "In Progress",
          "displayValue": "In Progress"
        }
      ]
    }

  ]
}
```

`GET /reports/{reportId}`

Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>discussions</li><li>attachments</li><li>[format](#formatting)</li><li>sourceSheets</li></ul> 
  | **exclude** (optional) --  a comma-separated list of optional elements to <i>not include</i> in the response.<br/><ul><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
  | **pageSize** (optional): Number of rows per page.  If not specified, the default value is 100.  This operation can return a maximum of 500 rows per page.
  | **page** (optional): Which page number (1-based) to return.  If not specified, the default value is 1.  If a page number is specified that is greater than the number of total pages, the last page is returned.
<%= RETURNS %> | [Report Object](#report-object), populated according to the specified parameters

## Get Report as Excel / CSV

> Example Request: Get Report as Excel

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept: application/vnd.ms-excel" \
-o output.xlsx
```

```javascript
var fs = require("fs")

// Set options
var options = {
  id: 3882962191181700 // Id of Report
};

// Get sheet
smartsheet.reports.getReportAsExcel(options)
  .then(function(fileContents) {
    // Write report to file
    fs.writeFile('output.xlsx', fileContents, 'binary', (err) => {
      if (err) throw err;
      console.log('The report has been saved!');
    });
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.ReportResources.GetReportAsExcel(
  3882962191181700,               // long reportId
  outputStream                    // BinaryWriter
);
```

```java
smartsheet.reportResources().getReportAsExcel(
    3882962191181700L,       // long reportId
    outputStream
);
```

```python
# Sample 1: Download file with filename suggested by API
ss_client.Reports.get_report_as_excel(
  3882962191181700,       # report_id
  download_folder_path
)

# Sample 2: Specify custom filename for the downloaded file
ss_client.Reports.get_report_as_excel(
  3882962191181700,       # report_id
  download_folder_path,
  'MyFileName.xslx'
)
```

```ruby
file_contents = smartsheet.reports.get_as_excel(
  report_id: 4583173393803140
)

File.open('output.xlsx', 'w') {|f| f.write(file_contents)}
```

> Example Response:

```shell
# See local file named "output.xlsx"
```

```javascript
// See local file named "output.xlsx"
```

```csharp
// Contents of Excel file is written to "outputStream"
```

```java
// Contents of Excel file is written to "outputStream"
```

```python
# download folder contains the downloaded Excel file
```

```ruby
# See local file named "output.xlsx"
```

> Example Request: Get Report as CSV

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept: text/csv" \
-o output.csv
```

```javascript
var fs = require("fs")

// Set options
var options = {
  id: 3882962191181700 // Id of Report
};

// Get sheet
smartsheet.reports.getReportAsCSV(options)
  .then(function(fileContents) {
    // Write report to file
    fs.writeFile('output.csv', fileContents, (err) => {
      if (err) throw err;
      console.log('The report has been saved!');
    });
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.ReportResources.GetReportAsCSV(
  3882962191181700,           // long reportId
  outputStream                // BinaryWriter
);
```

```java
smartsheet.reportResources().getReportAsCsv(
  3882962191181700L,       // long reportId
  outputStream
);
```

```python
# Sample 1: Download file with filename suggested by API
ss_client.Reports.get_report_as_csv(
  3882962191181700,       # report_id
  download_folder_path
)

# Sample 2: Specify custom filename for the downloaded file
ss_client.Reports.get_report_as_csv(
  3882962191181700,       # report_id
  download_folder_path,
  'CallMeAl.csv'
)
```

```ruby
file_contents = smartsheet.reports.get_as_csv(
  report_id: 4583173393803140
)

File.open('output.csv', 'w') {|f| f.write(file_contents)}
```

> Example Response:

```shell
# See local file named "output.csv"
```

```javascript
// See local file named "output.csv"
```

```csharp
// Contents of CSV file is written to "outputStream"
```

```java
// Contents of CSV file is written to "outputStream"
```

```python
# download folder contains the downloaded CSV file
```

```ruby
# See local file named "output.csv"
```

`GET /reports/{reportId}`

Gets the Report in the format specified, based on the Report Id.  

<aside class="notice">Note: For Excel format, only .xlsx output format is supported at this time.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= RETURNS %> | The report file in either Excel or CSV format.

## List Reports

> Example Request: List Reports

```shell
curl https://api.smartsheet.com/2.0/reports 
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.reports.listReports()
  .then(function(reportList) {
    console.log(reportList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
PaginatedResult<Report> reports = smartsheet.ReportResources.ListReports(
  null,               // PaginationParameters
  null                // Nullable<DateTime> modifiedSince = null
);
```

```java
PagedResult<Report> reports = smartsheet.reportResources().listReports(
  null,               // PaginationParameters
  null                // Date modifiedSince
);
```

```python
response = ss_client.Reports.list_reports(include_all=True)
reports = response.data
```

```ruby
response = smartsheet.reports.list
reports = response[:data]
```

> Example Response:

```json
{
  "pageNumber": 1,
  "totalPages": 1,
  "totalCount": 2,
  "data": [
    {   
      "id": 6761305928427396,
      "name": "r1",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=zWThapjNSR8LxW_kTdxPhQ"
    },  
    {   
      "id": 4508956358928260,
      "name": "r2",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=33-Y5QkQw6ZNSoApMKntbw"
    }   
  ]   
}
```

`GET /reports`

Gets a list of all Reports that the User has access to in alphabetical order by name. The list contains an abbreviated Report Object for each Report.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Report Objects](#report-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Report

### Get Report Publish Status

> Example Request: Get Report Publish Status

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  reportId: 3901932860401540
};

// Get report publish status
smartsheet.reports.getReportPublishStatus(options)
  .then(function(status) {
    console.log(status);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
status = ss_client.Reports.get_publish_status(
  1653067851556740)       # report_id
```

```ruby
status = smartsheet.reports.get_publish_status(
  report_id: 4583173393803140
)
```

> Example Response:

```json
{
  "readOnlyFullEnabled": true,
  "readOnlyFullAccessibleBy": "ALL",
  "readOnlyFullUrl": "https://publish.smartsheet.com/6d35fa6c99334d4892f9591cf6065"
}
```

`GET /reports/{reportId}/publish`

Gets the Report's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [ReportPublish Object](#reportpublish-object)

### Set Report Publish Status

> Example Request: Set Report Publish Status

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"readOnlyFullEnabled": true, "readOnlyFullAccessibleBy": "ORG"}'
```

```javascript
// Set options
var options = {
  reportId: 1653087851556740,
  body: {
    readOnlyFullEnabled: true,
    readOnlyFullAccessibleBy: "ALL"
  }
};

// Set report publish status
smartsheet.reports.setReportPublishStatus(options)
  .then(function(status) {
    console.log(status);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
response = ss_client.Reports.set_publish_status(
  1653067851556740,       # report_id
  ss_client.models.ReportPublish({
    'read_only_full_enabled': True
  })
)
```

```ruby
# Set options
body = {
  read_only_full_enabled: true,
  read_only_full_accessible_by: 'ORG'
}

# Set report publish status
status = smartsheet.reports.set_publish_status(
  report_id: 4583173393803140,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "readOnlyFullEnabled": true,
  "readOnlyFullAccessibleBy": "ORG",
    "readOnlyFullUrl": "http://publish.smartsheet.com/9862638d9c444014b5d7a114d436e99d"
  }
}
```

`PUT /reports/{reportId}/publish`

Sets the publish status of the Report and returns the new status, including the URL of any enabled publishing.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ReportPublish Object](#reportpublish-object)
<%= RETURNS %> | [Result Object](#result-object) containing a [ReportPublish Object](#reportpublish-object)

<aside class="notice">For Read Only, if you do not specify <b>readOnlyFullAccessibleBy</b>, the value defaults to the organization-level 'Report Publishing' setting (if the Report owner belongs to an organization) or to "ALL" (if the Report owner does not belong to an organization).</aside>

## Send Report via Email

<%= partial "snippets/sendReport.md.erb" %>

## Share Report

For details about Report sharing, see [Report Sharing](#report-sharing).

## <%= RELATED %>

A Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Report Attachments

For details about working with a Report's attachments, see [Attachments](#attachments).

### Report Cells

For details about working with a Report's cells, see [Cells](#cells).

### Report Columns

For details about working with a Report's columns, see [Columns](#columns).

### Report Discussions

For details about working with a Report's discussions, see [Discussions](#discussions).

### Report Rows 

For details about working with a Report's rows, see [Rows](#rows).

# Rows

A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Discussions and/or Attachments.

## <%= OBJECTS %>

### Row Object

> Example Row Object:

```json
{
  "id": 2361756178769796,
  "sheetId": 4583173393803140,
  "rowNumber": 1,
  "expanded": true,
  "cells": [],
  "createdAt": "2012-07-24T23:10:55-07:00",
  "modifiedAt": "2012-07-24T23:14:27-07:00"
}
```

If you specify the **parentId** attribute or the **siblingId** attribute, you can set one or the other, but not both.

     |     |     |
-----|-----|-----|
**id** | number | Row Id
**sheetId** | number | Parent Sheet Id
**rowNumber** | number | Row number within the sheet (1-based - starts at 1)
**version** | number | Sheet version number that is incremented every time a sheet is modified
**filteredOut** | Boolean | `true` if this row is filtered out by a column filter (and thus is not displayed in the Smartsheet app), `false` if the row is not filtered out.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **filters**.
**inCriticalPath** | Boolean | Only returned, with a value of `true`, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
**locked** | Boolean | Flag indicating whether the row is locked. In a response, a value of `true` indicates that the row has been locked by the sheet owner or the admin.
**lockedForUser** | Boolean | Flag indicating whether the row is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request.
**expanded** | Boolean | Flag to indicate if the row is expanded or collapsed
**accessLevel** | string | User's permission level on the Sheet that contains the Row
**format** | string | Format descriptor (see [Formatting](#formatting)).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this row has a non-default format applied.
**conditionalFormat** | string | Format descriptor describing this row's conditional format (see [Formatting](#formatting))<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this row has a conditional format applied.
**createdAt** | timestamp | Time of creation
**createdBy** | [User](#user-object) | User Object containing name and email of the creator of this row
**modifiedAt** | timestamp | Time of last modification
**modifiedBy** | [User](#user-object) | User Object containing name and email of the last person to modify this row
**cells** | [Cell](#cell-object)[] | Array of Cell Objects belonging to the row
**discussions** | [Discussion](#discussion-object)[] | Array of Discussion Objects.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **discussions**.
**attachments** | [Attachment](#attachment-object)[] | Array of Attachment Objects.<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **attachments**.
**columns** | [Column](#column-object)[] | Array of Column Objects.<br/>Only returned if the [Get Row](#get-row) **include** query string parameter contains **columns**.
**permalink** | string | URL that represents a direct link to the Row in Smartsheet<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **rowPermalink**.
**parentId** | number | In a response - the Id of the parent row (if any).<br/><br/>In a request - the Id of the desired parent row (used to specify the location for a new or moved row). For more information, see [Row Location](#row-location).
**siblingId** | number | In a response - the Id of the previous sibling row at the same hierarchical level of this row (if any).<br/><br/>In a request - the Id of the desired sibling row (used to specify the location for a new or moved row). For more information, see [Row Location](#row-location).
**toTop** | Boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).
**toBottom** | Boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).
**above** | Boolean | Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see [Row Location](#row-location).

### CopyOrMoveRowDirective Object

     |     |     |
-----|-----|-----|
**rowIds** | number[] | The Ids of the rows to move or copy from the source sheet
**to** | [CopyOrMoveRowDestination](#copyormoverowdestination-object) | A CopyOrMoveRowDestination Object that identifies the destination sheet 

### CopyOrMoveRowDestination Object

     |     |     |
-----|-----|-----|
**sheetId** | number | Id of the destination sheet

### CopyOrMoveRowResult Object

     |     |     |
-----|-----|-----|
**destinationSheetId** | number | Id of the destination sheet
**rowMappings** | [RowMapping](#rowmapping-object)[] | Array of RowMapping Objects 

### RowMapping Object

     |     |     |
-----|-----|-----|
**from** | number | Row Id in the source sheet
**to** | number | Row Id in the destination sheet

## Add Rows

> Example Request: Add Rows

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"toTop":true, "cells": [ {"columnId": 7960873114331012, "value": true}, {"columnId": 642523719853956, "value": "New status", "strict": false} ] }, {"toTop":true, "cells": [ {"columnId": 7960873114331012, "value": true}, {"columnId": 642523719853956, "value": "New status", "strict": false} ] }]'
```

```javascript
// Specify rows
var row = [
  {
    "toTop": true,
    "cells": [
      {
        "columnId": 7960873114331012,
        "value": true
      },
      {
        "columnId": 642523719853956,
        "value": "New status",
        "strict": false
      }
    ]
  },
  {
    "toTop": true,
    "cells": [
      {
        "columnId": 7960873114331012,
        "value": true
      },
      {
        "columnId": 642523719853956,
        "value": "New status",
        "strict": false
      }
    ]
  }
];

// Set options
var options = {
  sheetId: 2252168947361668,
  body: row
  };

// Add rows to sheet
smartsheet.sheets.addRows(options)
  .then(function(newRows) {
    console.log(newRows);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify cell values for first row
Cell[] cellsA = new Cell[] {
  new Cell
  {
    ColumnId = 7960873114331012,
    Value = true
  },
  new Cell
  {
    ColumnId = 642523719853956,
    Value = "New status"
  }
};

// Specify contents of first row
Row rowA = new Row
{
  ToTop = true,
  Cells = cellsA
};

// Specify cell values of second row
Cell[] cellsB = new Cell[] {
  new Cell
  {
    ColumnId = 7960873114331012,
    Value = true
  },
  new Cell
  {
    ColumnId = 642523719853956,
    Value = "New status"
  }
};

// Specify contents of second row
Row rowB = new Row
{
  ToTop = true,
  Cells = cellsB
};

// Add rows to sheet
IList<Row> newRows = smartsheet.SheetResources.RowResources.AddRows(
  2331373580117892,               // long sheetId
  new Row[] { rowA, rowB }        // IEnumerable<Row> rowsToAdd
);
```

```java
// Specify cell values for first row
List<Cell> rowACells = Arrays.asList(
  new Cell(7960873114331012L)   // column Id
    .setValue(true),
  new Cell(642523719853956L)    // column Id
    .setValue("New status")
);

// Specify contents of first row
Row rowA = new Row();
rowA.setCells(rowACells)
  .setToBottom(true);

// Specify cell values for second row
List<Cell> rowBCells = Arrays.asList(
  new Cell(7960873114331012L)
    .setValue(true),
  new Cell(642523719853956L)
    .setValue("New status")
);

// Specify contents of second row
Row rowB = new Row();
rowB.setCells(rowBCells)
  .setToBottom(true);

// Add rows to sheet
List<Row> newRows = smartsheet.sheetResources().rowResources().addRows(
  1639534409607044L,    // sheet Id
  Arrays.asList(rowA, rowB));
```

```python
# Specify cell values for one row
row_a = ss_client.models.Row()
row_a.to_top = True
row_a.cells.append({
  'column_id': 7960873114331012,
  'value': True
})
row_a.cells.append({
  'column_id': 642523719853956
  'value': 'New Status',
  'strict': False
})

# Specify cell values for another row
row_b = ss_client.models.Row()
row_b.to_top = True
row_b.cells.append({
  'column_id': 7960873114331012,
  'value': True
})
row_b.cells.append({
  'column_id': 642523719853956
  'value': 'New Status',
  'strict': False
})

# Add rows to sheet
response = ss_client.Sheets.add_rows(
  2331373580117892,       # sheet_id
  [row_a, row_b])
```

```ruby
# Specify values
body = {
  to_bottom: true,
  cells: [
    {
      column_id: 495660408563588,
      value: 'New Status'
    }
  ],
  locked: false
}

# Add rows to a sheet
response = smartsheet.sheets.rows.add(
  sheet_id: 2331373580117892,
  body: body
)
```

> Example Response:

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
    "id": 7670198317672324,
    "sheetId": 2331373580117892,
    "rowNumber": 1,
    "expanded": true,
    "createdAt": "2013-02-28T17:45:13-08:00",
    "modifiedAt": "2013-02-28T17:45:13-08:00",
    "cells": [{
      "columnId": 7960873114331012,
      "type": "CHECKBOX",
      "value": true
      },
      {
      "columnId": 642523719853956,
      "displayValue": "New status",
      "type": "TEXT_NUMBER",
      "value": "New status"
      }
      ]
    },
    {
      "id": 2040698783459204,
      "sheetId": 2331373580117892,
      "rowNumber": 2,
      "expanded": true,
      "createdAt": "2013-02-28T17:45:13-08:00",
      "modifiedAt": "2013-02-28T17:45:13-08:00",
      "cells": [{
        "columnId": 7960873114331012,
        "type": "CHECKBOX",
        "value": true
        },
        {
        "columnId": 642523719853956,
        "displayValue": "New status",
        "type": "TEXT_NUMBER",
        "value": "New status"
        }
      ]
    }
  ],
  "version": 14
}
```

`POST /sheets/{sheetId}/rows`

Inserts one or more rows into the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<aside class="notice">If multiple rows are specified in the request, all rows must be inserted at the same location (for example, the <b>toTop</b>, <b>toBottom</b>, <b>parentId</b>, <b>siblingId</b>, and <b>above</b> attributes must be the same for all rows in the request).</aside>

<aside class="notice">In a parent row, values of the following fields are auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %><BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | [Row object](#row-object) or an array of Row objects, with the following attributes:<ul><%= partial "snippets/addRowUpdateRow.md.erb" %></ul>


     |     |
-----|-----|
<%= RETURNS %> | [Result object](#result-object) containing the newly created rows -- either a single [Row object](#row-object) or array of Row objects, corresponding to what was specified in the request, as well as the new version of the Sheet.
<%= ERRORS %> | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the [Error object](#error-object) returned contains a **detail** attribute set to an object with the following attribute:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li></ul>If any error occurs, the entire request fails (no rows are added), and the Error response returned describes the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## Copy Rows to Another Sheet

> Example Request: Copy Rows to Another Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/copy \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ "rowIds": [145417762563972, 8026717110462340], "to": {"sheetId": 2258256056870788} }'
```

```javascript
// Specify the directive
var copyRow = {
  "rowIds": [145417762563972,8026717110462340],
  "to": {
    "sheetId": 2258256056870788
  }
};

// Set options
var options = {
  sheetId: 4583173393803140,
  body: copyRow
  };

// Copy rows
smartsheet.sheets.copyRowToAnotherSheet(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination sheet
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };

// Specify rows to be copied (and destination sheet)
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };

// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters
CopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(
  4583173393803140,           // long sheetId
  directive,
  null,                       // IEnumerable<CopyRowInclusion> include
  null                        // Nullable<bool> ignoreRowsNotFound
);

// Sample 2: Specify 'include' parameter with value of "CHILDREN", and 'ignoreRowsNotFound' parameter with value of 'true'
CopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(
  4583173393803140,           // long sheetId
  directive,
  new CopyRowInclusion[] {
    CopyRowInclusion.CHILDREN },
  true
);
```

```java
// Specify destination sheet
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination()
  .setSheetId(2258256056870788L);

// Specify rows to be copied (and destination sheet)
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective()
  .setRowIds(Arrays.asList(145417762563972L, 8026717110462340L))
  .setTo(destination);

// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters
CopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().copyRows(
  4583173393803140L,                        // long sheetId
  null,                                     // EnumSet<RowCopyInclusion> includes
  true,                                     // Boolean ignoreRowsNotFound
  directive
);

// Sample 2: Specify 'include' parameter with value of "CHILDREN", and 'ignoreRowsNotFound' parameter with value of 'true'
CopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().copyRows(
  4583173393803140L,                        // long sheetId
  EnumSet.of(RowCopyInclusion.CHILDREN),
  true,
  directive
);
```

```python
response = ss_client.Sheets.copy_rows(
  4583173393803140,               # sheet_id of rows to be copied
  ss_client.models.CopyOrMoveRowDirective({
    'row_ids': [145417762563972, 8026717110462340]
    'to': ss_client.models.CopyOrMoveRowDestination({
      'sheet_id': 2258256056870788
    })
  })
)
```

```ruby
# Specify rows to copy and destination sheet
body = {
  row_ids: [
    145417762563972,
    8026717110462340
  ],
  to: {
    sheet_id: 2258256056870788
  }
}

# Copy rows to another sheet
response = smartsheet.sheets.rows.copy_to_another_sheet(
  sheet_id: 4583173393803140,
  body: body
)
```

<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/copy`

Copies Rows from the Sheet specified in the URL to (the bottom of) another sheet.

<aside class="notice">Up to 5,000 row Ids can be specified in the request, but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, an error response is returned.</aside>
     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to copy in addition to the cell data:<ul><li>attachments</li><li>discussions</li><li>children - if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.</li><li>**all** - specify a value of "all" to include everything (attachments, discussions, and children)</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied).
<%= REQUEST %> | [CopyOrMoveRowDirective Object](#copyormoverowdirective-object)
<%= RETURNS %> | [CopyOrMoveRowResult Object](#copyormoverowresult-object)

## Delete Rows

> Example Request: Delete Rows

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}&ignoreRowsNotFound=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  rowId: 207098194749316
};

// Delete row
smartsheet.sheets.deleteRow(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify 'ignoreRowsNotFound' parameter with value of 'true'
smartsheet.SheetResources.RowResources.DeleteRows(
  2252168947361668,                                    // long sheetId
  new long[] { 207098194749316, 207098194749317 },     // rowIds
  true                                                 // Boolean ignoreRowsNotFound
);
```

```java
// Specify 'ignoreRowsNotFound' parameter with value of 'true'
smartsheet.sheetResources().rowResources().deleteRows(
  2252168947361668L,               // long sheetId
  new HashSet(Arrays.asList(
    207098194749316L,            // long rowId,
    207098194749317L,            // long additional rowId
    207098194749318L,)           // long additional rowId
  true                             // Boolean ignoreRowsNotFound
);
```

```python
ss_client.Sheets.delete_rows(
  2252168947361668,                       # sheet_id
  [207098194749316, 207098194749317])     # row_ids
```

```ruby
smartsheet.sheets.rows.delete(
  sheet_id: 2252168947361668,
  row_ids: [207098194749316, 207098194749316]
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": [
    207098194749316,
    207098194749316
  ]
}
```

`DELETE /sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}`

Deletes one or more rows from the Sheet specified in the URL.

<aside class="warning">This operation deletes ALL child Rows of the specified Rows.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **ids** (required) - comma-separated list of Row Ids
 | **ignoreRowsNotFound** (optional) - true or false. If set to false and any of the specified Row Ids are not found, no rows are deleted, and the "not found" [error](#complete-error-code-list) is returned.
<%= RETURNS %> | [Result Object](#result-object) containing Row Ids corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).

## Get Row

> Example Request: Get Row

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}?include=discussions,attachments,columns,columnType' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 4583173393803140,
  rowId: 2361756178769796
};

// Get row
smartsheet.sheets.getRow(options)
  .then(function(row) {
    console.log(row);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit 'include' parameter and pagination parameters
Row row = smartsheet.SheetResources.RowResources.GetRow(
  4583173393803140,               // long sheetId
  2361756178769796,               // long rowId
  null,                           // IEnumerable<RowInclusion> include
  null                            // IEnumerable<RowExclusion> exclude
);

// Specify 'include' parameter with values of "COLUMNS" and "COLUMN_TYPE", and 'exclude' parameter with value of "NONEXISTENT_CELLS"
Row row = smartsheet.SheetResources.RowResources.GetRow(
  4583173393803140,               // long sheetId
  2361756178769796,               // long rowId
  new RowInclusion[] {
    RowInclusion.COLUMNS,
    RowInclusion.COLUMN_TYPE },
  new ObjectExclusion[] { ObjectExclusion.NONEXISTENT_CELLS }
);
```

```java
// Sample 1: Omit 'include' parameter and pagination parameters
Row row = smartsheet.sheetResources().rowResources().getRow(
  4583173393803140L,       // long sheetId
  2361756178769796L,       // long rowId
  null,                    // EnumSet<RowInclusion> includes
  null                     // EnumSet<ObjectExclusion> excludes
);

// Sample 2: Specify 'include' parameter with values of "COLUMNS" and "COLUMN_TYPE", and 'exclude' parameter with value of "NONEXISTENT_CELLS"
Row row = smartsheet.sheetResources().rowResources().getRow(
  4583173393803140L,       // long sheetId
  2361756178769796L,       // long rowId
  EnumSet.of(
    RowInclusion.COLUMNS,
    RowInclusion.COLUMN_TYPE),
  EnumSet.of(
    ObjectExclusion.NONEXISTENT_CELLS)
);
```

```python
# Include discussions, attachments, columns, and columnType
row = ss_client.Sheets.get_row(
  4583173393803140,       # sheet_id 
  2361756178769796,       # row_id 
  include='discussions,attachments,columns,columnType'
)
```

```ruby
row = smartsheet.sheets.rows.get(
  sheet_id: 4583173393803140,
  row_id: 2361756178769796
)
```

> Example Response:

```json
{
  "id": 2361756178769796,
  "sheetId": 4583173393803140,
  "rowNumber": 1,
  "expanded": true,
  "cells": [
    {
      "columnType": "TEXT_NUMBER",
      "value": "Revision 1",
      "displayValue": "Revision 1",
      "columnId": 4583173393803140
    },
    {
      "columnType": "PICKLIST",
      "value": "completed",
      "displayValue": "completed",
      "columnId": 2331373580117892
    }
  ],
  "createdAt": "2012-07-24T23:10:55-07:00",
  "modifiedAt": "2012-07-24T23:14:27-07:00"
}
```

`GET /sheets/{sheetId}/rows/{rowId}`

Gets the Row specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to include in the response.<br/><br/>See [Row Include Flags](#row-include-flags).<br/>Also supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.<br/><br/>The **filters** include flag returns a **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.
  | **exclude** (optional) -- a comma-separated list of elements to <i>not include</i> in the response.<br/><ul><li>**nonexistentCells**: excludes cells that have never contained any data</li><li>**include=format&exclude=nonexistentCells**: excludes cells that have never contained data yet returns those cells if they have formatting or conditional formatting</li><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
<%= RETURNS %> | [Row Object](#row-object), populated according to the specified parameters

## List Rows

To get the list of all Rows in a Sheet, use the [Get Sheet](#get-sheet) operation.

## Move Rows to Another Sheet

> Example Request: Move Rows to Another Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/move \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ "rowIds": [145417762563972, 8026717110462340], "to": {"sheetId": 2258256056870788} }'
```

```javascript
// Specify the directive
var moveRow = {
  "rowIds": [145417762563972,8026717110462340],
  "to": {
    "sheetId": 2258256056870788
  }
};

// Set options
var options = {
  sheetId: 4583173393803140,
  body: moveRow
  };

// Move rows
smartsheet.sheets.moveRowToAnotherSheet(options)
  .then(function(movedRow) {
    console.log(movedRow);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination sheet
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };

// Specify rows to be moved (and destination sheet)
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };

// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters
CopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(
  4583173393803140,               // long sheetId
  directive,
  null,                           // IEnumerable<MoveRowInclusion> include
  null                            // Nullable<bool> ignoreRowsNotFound
);

// Sample 2: Specify 'include' parameter with value of "ATTACHMENTS" and "DISCUSSIONS", and 'ignoreRowsNotFound' parameter with value of 'true'
CopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(
  4583173393803140,               // long sheetId
  directive,
  new MoveRowInclusion[] {
    MoveRowInclusion.ATTACHMENTS,
    MoveRowInclusion.DISCUSSIONS },
  true                            // Nullable<bool> ignoreRowsNotFound
);
```

```java
// Specify destination sheet
CopyOrMoveRowDestination destination = new CopyOrMoveRowDestination()
  .setSheetId(2258256056870788L);

// Specify rows to be moved (and destination sheet)
CopyOrMoveRowDirective directive = new CopyOrMoveRowDirective()
  .setRowIds(Arrays.asList(145417762563972L, 8026717110462340L))
  .setTo(destination);

// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters
CopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().moveRows(
  4583173393803140L,                  // long sheetId
  null,                               // EnumSet<RowMoveInclusion> includes
  true,                               // Boolean ignoreRowsNotFound
  directive
);

// Sample 2: Specify 'include' parameter with value of "ATTACHMENTS" and "DISCUSSIONS", and 'ignoreRowsNotFound' parameter with value of 'true'
CopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().moveRows(
  4583173393803140L,                  // long sheetId
  EnumSet.of(
    RowMoveInclusion.ATTACHMENTS,
    RowMoveInclusion.DISCUSSIONS),
  true,                               // Boolean ignoreRowsNotFound
  directive
);
```

```python
response = ss_client.Sheets.move_rows(
  4583173393803140,           # sheet_id of rows to be moved
  ss_client.models.CopyOrMoveRowDirective({
    'row_ids': [145417762563972, 8026717110462340],
    'to': ss_client.models.CopyOrMoveRowDestination({
      'sheet_id': 2258256056870788
    })
  })
)
```

```ruby
# Specify rows to move and destination sheet
body = {
  row_ids: [
    145417762563972,
    8026717110462340
  ],
  to: {
    sheet_id: 2258256056870788
  }
}

# Move rows to another sheet
response = smartsheet.sheets.rows.move_to_another_sheet(
  sheet_id: 4583173393803140,
  body: body
)
```

<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/move`

Moves Rows from the Sheet specified in the URL to (the bottom of) another sheet.
<aside class="notice">Up to 5,000 row Ids can be specified in the request, but if the total number of rows in the destination sheet after the move exceeds the Smartsheet row limit, an error response is returned.</aside>
<aside class="notice">Any child rows of the rows specified in the request are also moved. Parent-child relationships amongst rows are preserved within the destination sheet.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to move in addition to the cell data:<ul><li>attachments</li><li>discussions</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet do not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved).
<%= REQUEST %> | [CopyOrMoveRowDirective Object](#copyormoverowdirective-object)
<%= RETURNS %> | [CopyOrMoveRowResult Object](#copyormoverowresult-object)

## Send Rows via Email

<%= partial "snippets/sendRows.md.erb" %>

## Send Update Request

For details about sending update requests, see [Create Update Request](#create-update-request).

## Sort Rows

For details about sorting the rows in a sheet, see [Sort Rows in Sheet](#sort-rows-in-sheet).

## Update Rows

> Example Request: Update Rows

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '[{"id": "6572427401553796", "cells": [{"columnId": 7518312134403972,"image": {"altText": "New Alt Text"},"value": "new value"}, {"columnId": 1888812600190852,"value": "A"}]}, {"id": "2068827774183300", "cells": [{"columnId": 7518312134403972,"value": "desc_updated"}, {"columnId": 1888812600190852,"value": "B"}]}]'
```

```javascript
// Specify updated cell values
var row = [
  {
    "id": "6572427401553796",
    "cells": [
      {
        "columnId": 7518312134403972,
        "value": "new value"
      },
      {
        "columnId": 1888812600190852,
        "value": "A"
      }
    ]
  },
  {
    "id": "2068827774183300",
    "cells": [
      {
        "columnId": 7518312134403972,
        "value": "desc_updated"
      },
      {
        "columnId": 1888812600190852,
        "value": "B"
      }
    ]
  }
];

// Set options
var options = {
  sheetId: 2068827774183300,
  body: row
  };

// Update rows in sheet
smartsheet.sheets.updateRow(options)
  .then(function(updatedRows) {
    console.log(updatedRows);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify updated value for first cell
var cellToUpdateA = new Cell
{
  ColumnId = 7518312134403972,
  Value = "new value"
};

// Specify updated value for second cell
var cellToUpdateB = new Cell
{
  ColumnId = 1888812600190852,
  Value = "A"
};

// Identify row and add new cell values to it
var rowToUpdate = new Row
{
  Id = 6572427401553796,
  Cells = new Cell[] { cellToUpdateA, cellToUpdateB }
};

IList<Row> updatedRow = smartsheet.SheetResources.RowResources.UpdateRows(
  2068827774183300,    // sheet Id
  new Row[] {rowToUpdate}
);
```

```java
// Specify updated cell values for first row
Cell cellA = new Cell(7518312134403972L)   // column Id
  .setValue("new value");

Cell cellB = new Cell(6392412227561348L)   // column Id
  .setValue(123);

Row rowA = new Row(2068827774183300L);
rowA.setCells(Arrays.asList(cellA, cellB));

// Specify updated cell values for second row
Cell cellC = new Cell(7518312134403972L)
  .setValue("desc_updated");

Cell cellD = new Cell(6392412227561348L)
  .setValue(456);

Row rowB = new Row(6572427401553796L);
rowB.setCells(Arrays.asList(cellC, cellD));

// Update rows in sheet
List<Row> updatedRows = smartsheet.sheetResources().rowResources().updateRows(
  1639534409607044L,                      // long sheetId
  Arrays.asList(rowA, rowB)
);
```

```python
# Build new cell value
new_cell = ss_client.models.Cell()
new_cell.column_id = 7036894123976580
new_cell.value = "new value"
new_cell.strict = False

# Build the row to update
new_row = ss_client.models.Row()
new_row.id = 6809535313667972
new_row.cells.append(new_cell)

# Update rows
updated_row = ss_client.Sheets.update_rows(
  2068827774183300,      # sheet_id
  [new_row])
```

```ruby
# Specify updated cell values
body = {
  id: 4293147074291588,   # row Id
  cells: [
    column_id: 7036894123976580,
    value: 'new value'
  ]
}

# Update row
response = smartsheet.sheets.rows.update(
  sheet_id: 2068827774183300,
  body: body
)
```

> Example Response:

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
    "id": 2068827774183300,
    "rowNumber": 2,
    "parentRowNumber": 1,
    "parentId": 4624744004773764,
    "expanded": true,
    "createdAt": "2015-01-09T11:41:55-08:00",
    "modifiedAt": "2015-02-23T15:36:07-08:00",
    "cells": [{
      "columnId": 7518312134403972,
      "type": "TEXT_NUMBER",
      "value": "desc_updated",
      "displayValue": "desc_updated"
    },
    {
      "columnId": 1888812600190852,
      "type": "PICKLIST",
      "value": "B",
      "displayValue": "B"
    },
    {
      "columnId": 6392412227561348,
      "type": "TEXT_NUMBER",
      "value": 1,
      "displayValue": "1"
    }
    ]
  },
  {
    "id": 6572427401553796,
    "rowNumber": 3,
    "parentRowNumber": 1,
    "parentId": 4624744004773764,
    "expanded": true,
    "createdAt": "2015-01-09T11:41:55-08:00",
    "modifiedAt": "2015-02-23T15:36:07-08:00",
    "cells": [{
      "columnId": 7518312134403972,
      "type": "TEXT_NUMBER",
      "value": "new value",
      "displayValue": "new value"
    },
    {
      "columnId": 1888812600190852,
      "type": "PICKLIST",
      "value": "A",
      "displayValue": "A"
    },
    {
      "columnId": 6392412227561348,
      "type": "TEXT_NUMBER",
      "value": 1,
      "displayValue": "1"
    }
    ]
  }
  ],
  "version": 8
}
```

`PUT /sheets/{sheetId}/rows`

Updates cell values in the specified rows, expands/collapses the specified rows, and/or modifies the position of specified rows (including indenting/outdenting). 

<aside class="notice">If a row's position is updated, all child rows are moved with the row.</aside>

<aside class="notice">In a parent row, values of the following fields are auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %><BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | [Row object](#row-object) or an array of Row objects, with the following attributes:<ul><li>**id** (required)</li><%= partial "snippets/addRowUpdateRow.md.erb" %></ul>

     |     |
-----|-----|
<%= RETURNS %> | [Result object](#result-object) containing an array of the updated rows. 
<%= ERRORS %>  | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the [Error Object](#error-object) returned contains a **detail** attribute set to an object with the following attributes:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li><li>**rowId**: the id of the row that caused the error (omitted if the row was missing an id)</li></ul>If any error occurs, the entire request fails (no rows are updated), and the Error response returned describes the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;&#160;&#160;"rowId": 6572427401553796<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## <%= RELATED %>

A Row is comprised of a collection of Cells, and may optionally contain Attachments and/or Discussions.

### Row Attachments

For details about working with a Row's attachments, see [Attachments](#attachments).

### Row Cells

For details about working with a Row's cells, see [Cells](#cells).

For details about working with images in cells, see [Cell Images](#cell-images).

### Row Discussions

For details about working with a row's discussions, see [Discussions](#discussions).

### Row Include Flags

Endpoints which return rows (for example, [get sheet](#get-sheet), [get row](#get-row)) support the optional **include** query string parameter. If specified, the value of the **include** parameter is 
a comma-delimited list of flags that indicate additional attributes to be included in each [Row Object](#row-object) within the response.

Include Flag | Description |
-------------|-------|
**discussions**	| Includes row **discussions** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**attachments**	| Includes row **attachments** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**format**		| Includes **format** attribute on the row and its cells.  See [Formatting](#formatting).
**filters**		| Includes **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.
**columnType**	| Includes **columnType** attribute in the row's [cells](#cell-object) indicating the type of the column the cell resides in.
**rowPermalink** | Includes **permalink** attribute that represents a direct link to the [row](#row-object) in the Smartsheet application.
**rowWriterInfo** | Includes **createdBy** and **modifiedBy** attributes on the row, indicating the row's creator, and last modifier.
**objectValue** | Includes **objectValue** attribute on cells containing values. For more information see [Cell Reference](#cell-reference).

### Row Location

When you [add a row](#add-rows), the default behavior is for Smartsheet to put the new row at the bottom of the sheet. And when you [update a row](#update-rows), the default behavior is to keep the row where it is.

If you want to specify where the row is added or moved to in the sheet, Smartsheet provides the following "location-specifier" [row](#row-object) attributes. Boolean attributes only take effect if the value is `true`.

Row Attribute | Type | Description
-------|--------|--------
**toTop** | Boolean | Add or move the row to the top of the sheet.
**toBottom** | Boolean | Add or move the row to the bottom of the sheet.
**parentId** | Number | Add or move the row so that it is the first child row of the specified parent row. (Cannot be used with a **siblingId**.) 
**parentId** +<br/>**toBottom** | Number + Boolean | Add or move the row so that it is the last child row of the specified parent row. 
**siblingId** | Number | Add or move the row directly below the sibling row (at the same indent level as the specified row). (Cannot be used with **parentId**. **toTop**, or **toBottom**.) 
**siblingId** +<br/>**above** | Number + Boolean | Add or move the row directly above the sibling row (at the same indent level as the specified row). 
**indent** | Number | Number of levels to indent an existing row. For new rows, use **parentId**.
**outdent** | Number | Number of levels to outdent an existing row. For new rows, use **parentId**.

# Search

Use the *Search* operations to search a specific Sheet or to search across all Sheets that a User can access.

## <%= OBJECTS %>

### SearchResult Object

> Example SearchResult Object:

```json
{
  "results": [
    {
      "contextData": [
        "Discussion 1"
    ],
    "objectId": 1888207043356548,
    "objectType": "discussion",
    "parentObjectId": 7141187195824004,
    "parentObjectName": "Sheet 1",
    "parentObjectType": "sheet",
    "text": "discussion stuff goes here"
    }
  ],
  "totalCount": 2
}
```

     |     |     |
-----|-----|-----|
**totalCount** | number | Total number of search results
**results** | [SearchResultItem](#searchresultitem-object)[] | Array of SearchResultItem Objects

### SearchResultItem Object

     |     |     |
-----|-----|-----|
**text** | string | Search result text excerpt
**objectId** | number | Search result object Id
**objectType** | string | Search result object type (row, sheet, attachment, discussion, folder, report, sight, template, workspace)
**parentObjectId** | number | Search result parent object Id
**parentObjectType** | string | Search result parent object type (workspace, folder, sheet, report, sight, template)
**parentObjectName** | string | Search result parent object name
**contextData** | array | Additional info on search result context (row num)

## Search Everything

> Example Request: Search Everything

```shell
curl 'https://api.smartsheet.com/2.0/search?query=stuff' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  query: "stuff"
};

// Search everything
smartsheet.search.searchAll(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set search criteria
string query = "stuff";

// Search everything
SearchResult results = smartsheet.SearchResources.Search(query);
```

```java
// Set search criteria
String query = "stuff";

// Search everything
SearchResult results = smartsheet.searchResources().search(query);
```

```python
# Set search criteria
query = 'stuff'

# Search everything
result = ss_client.Search.search(query)
# result is a ss_client.models.SearchResult object
```

```ruby
results = smartsheet.search.search_all(
  query: 'stuff'
)
```

> Example Response:

```json
{
  "results": [
    {
      "contextData": [
        "Discussion 1"
      ],
      "objectId": 1888207043356548,
      "objectType": "discussion",
      "parentObjectId": 7141187195824004,
      "parentObjectName": "Sheet 1",
      "parentObjectType": "sheet",
      "text": "discussion stuff goes here"
    },
    {
      "contextData": [
        "Row 1"
      ],
      "objectId": 2711817823774596,
      "objectType": "row",
      "parentObjectId": 2583735121012612,
      "parentObjectName": "Sheet 2",
      "parentObjectType": "sheet",
      "text": "row stuff goes here"
    }
  ],
  "totalCount": 2
}
```

`GET /search`

Searches all Sheets that the User can access, for the specified text.

<aside class="notice">Newly created or recently updated data may not be immediately discoverable via Search.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **query** (required): text with which to perform the search. Enclose in double-quotes for an exact search.
 | **include** (optional): when specified with a value of "favoriteFlag", response indicates which returned items are favorites:<ul><li>favorite -- Folders, Reports, Sheets, Sights, Templates, and Workspaces will have the property "favorite": true</li><li>parentObjectFavorite -- Attachments, Discussions, Profile Fields, and Rows will have the property "parentObjectFavorite": true</li></ul>
 | **location** (optional): when specified with a value of "personalWorkspace", limits the response to only those items in the user's Workspaces.
 | <%= PARAMETER_MODIFIEDSINCE %>
 | **scopes** (optional): comma-separated list of search filters:<ul><li>attachments</li><li>cellData</li><li>comments</li><li>folderNames</li><li>profileFields</li><li>reportNames</li><li>sheetNames</li><li>sightNames</li><li>templateNames</li><li>workspaceNames</li></ul>
<%= RETURNS %> | [SearchResult Object](#searchresult-object) that contains a maximum of 100 [SearchResultems](#searchresultitem-object)

## Search Sheet

<%= partial "snippets/searchSheet.md.erb" %>

# Send via Email

Use the *Send* operations to send a Report, a Row, or a Sheet via email.

## <%= OBJECTS %>

> Example Email Object

```json
{
	"sendTo": [{
		"email": "john.doe@smartsheet.com"
	}, {
		"groupId": 2258118617917316
	}],
	"subject": "Check these rows out!",
	"message": "Here are the rows I mentioned in our meeting",
	"ccMe": false,
	"format": "PDF",
	"formatDetails": {
		"paperSize": "A4"
	}
}
```

### Email Object

     |     |     |
-----|-----|-----|
**sendTo**  | [Recipient](#recipient-object)[]  | Array of Recipient Objects. Required.
**subject** | string | The subject of the email. Optional.
**message** | string | The message of the email. Optional.
**ccMe** | Boolean | A flag to indicate whether or not to send a copy of the email to the sender. Optional, defaults to false.

### FormatDetails Object

     |     |     |
-----|-----|-----|
**paperSize**   | string | One of the following values: LETTER, LEGAL, WIDE, ARCHD, A4, A3, A2, A1, A0.

### Recipient Object

Specifies the recipient of an [Email](#email-object).  The recipient may be either an individual or a group.  To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute.
Either **email** and **groupId** may be set, but not both.

     |     |     |
-----|-----|-----|
**email**   | string | The email address of an individual recipient. Optional.
**groupId** | number | The Id of a group recipient. Optional.

### RowEmail Object

Extends the [Email Object](#email-object), adding the following:

     |     |     |
-----|-----|-----|
**columnIds** | number[] | Ids of the columns to be included.
**includeAttachments** | Boolean | A flag to indicate whether or not to include Attachments in the email.
**includeDiscussions** | Boolean | A flag to indicate whether or not to include Discussions in the email.
**layout**   | string | One of the following values: HORIZONTAL, VERTICAL.  Optional, defaults to HORIZONTAL when multiple rows are being sent, and to VERTICAL when a single row is being sent.  HORIZONTAL formats the rows being sent as a grid, whereas VERTICAL formats the rows being sent as separate cards.

### MultiRowEmail Object

Extends the [RowEmail Object](#rowemail-object), adding the following:

     |     |     |
-----|-----|-----|
**rowIds** | number[] | Ids of rows to be included.

### SheetEmail Object

Extends the [Email Object](#email-object), adding the following:

     |     |     |
-----|-----|-----|
**format** | string | One of the following values:<ul><li>PDF</li><li>PDF_GANTT</li><li>EXCEL</li></ul>
**formatDetails** | [FormatDetails](#formatdetails-object) | A FormatDetails Object.

## Send Report

<%= partial "snippets/sendReport.md.erb" %>

## Send Rows

<%= partial "snippets/sendRows.md.erb" %>

## Send Sheet

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

For details about sending update requests, see [Create Update Request](#create-update-request).

# Server Information

For developer convenience, the Smartsheet API provides access to application constants.

## <%= OBJECTS %>

### ServerInfo Object

> Example ServerInfo Object:

```json
{
	"supportedLocales": [],
	"featureInfo": {
		"symbolsVersion": 2
	},
	"formats": {
		"defaults": "0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
		"fontFamily": [],
		"fontSize": [],
		"bold": [],
		"italic": [],
		"underline": [],
		"strikethrough": [],
		"horizontalAlign": [],
		"verticalAlign": [],
		"color": [],
		"currency": [],
		"decimalCount": [],
		"thousandsSeparator": [],
		"numberFormat": [],
		"textWrap": []
	}
}
```

     |     |     |
-----|-----|-----|
**supportedLocales** | array | Array of strings representing all Smartsheet-supported locales.
**formats** | [FormatTables](#formattables-object) | Definition of format tables that are used in Column, Row, and Cell **format** property.  For more information, see [Formatting](#formatting).

## Get Server Info

> Example Request: Get Server Info

```shell
curl https://api.smartsheet.com/2.0/serverinfo
```

```javascript
smartsheet.server.getInfo()
  .then(function(serverInfo) {
    console.log(serverInfo);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
ServerInfo serverInfo = smartsheet.ServerInfoResources.GetServerInfo();
```

```java
ServerInfo serverInfo = smartsheet.serverInfoResources().getServerInfo();
```

```python
info = ss_client.Server.server_info()
```

```ruby
info = smartsheet.server_info.get
```

> Example Response: (*too long to list in its entirety*)

```json
{
  "supportedLocales": [  ],
  "formats": {  }
}
```

`GET /serverinfo`

Gets application constants.

     |     |
-----|-----|
<%= SCOPE %> | None required (may be called unauthenticated)
<%= HEADERS %> | None required (may be called unauthenticated)
<%= RETURNS %> | [ServerInfo Object](#serverinfo-object)

# Sharing

Use the *Sharing* operations to control sharing of Reports, Sheets, Workspaces, and Sights.

## <%= OBJECTS %>

### Share Object

> Example Share Object:

```json
{
  "id": "AQAISF82FOeE",
  "type": "GROUP",
  "groupId": 2331373580117892,
  "name": "Group 1",
  "accessLevel": "ADMIN",
  "scope": "ITEM",
  "createdAt": "2016-02-17T22:24:09Z",
  "modifiedAt": "2016-02-17T22:24:09Z"
}
```

     |     |     |
-----|-----|-----|
**id**          | string | Share Id.<br/>**NOTE:** unlike other Smartsheet object ids, this id is an alphanumeric string.
**type**        | string | The type of this share. One of the following values: `USER` or `GROUP`.
**userId**      | number | User Id if the share is a user share, else null.
**groupId**     | number | Group Id if the share is a group share, else null.
**email**       | string | User's primary email address for user shares; null for group shares.
**name**        | string | If a user share and user is also a contact, the user's full name.  If a group share, the group's name.
**accessLevel** | string | User or group's [access level](#access-levels) on shared object.
**scope**       | string | The scope of this share. One of the following values: <ul><li>`ITEM`: an item-level share (that is, the specific object to which the Share applies is shared with the user or group)</li><li>`WORKSPACE`: a workspace-level share (that is, the workspace that contains the object to which the Share applies is shared with the user or group)</li></ul>
**createdAt**	| timestamp | Time that the share was created.
**modifiedAt**	| timestamp | Time that the share was modified.
**subject**		| string | The subject of the email that is optionally sent to notify the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**message**		| string | The message included in the body of the email that is optionally sent to the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**ccMe**		| Boolean | Flag to indicate whether to send a copy of the email to the sharer of the sheet. <%= REQUEST_ONLY_ATTRIBUTE %>

## Report Sharing

### Delete Report Share

> Example Request: Delete Report Share

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  reportId: 665829219035012,
  shareId: "AAAQSF82F1eE"
};

// Delete report share
smartsheet.reports.deleteShare(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.ReportResources.ShareResources.DeleteShare(
  665829219035012,            // long reportId
  "AAAQSF82F1eE"              // string shareId
);
```

```java
smartsheet.reportResources().shareResources().deleteShare(
  665829219035012L,        // long reportId
  "AAAQSF82F1eE"           // string shareId
);
```

```python
ss_client.Reports.delete_share(
  665829219035012,        # report_id
  'AAAQSF82F1eE')         # share_id
```

```ruby
smartsheet.reports.share.delete(
  report_id: 665829219035012,
  share_id: 'AAAQSF82F1eE'
)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /reports/{reportId}/shares/{shareId}`

Deletes the Share specified in the URL. 

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Report Share

> Example Request: Get Report Share

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript 
// Set options
var options = {
  reportId: 6932724448552836,
  shareId: "AQAISF82FOeE"
};

// Get report share
smartsheet.reports.getShare(options)
  .then(function(share) {
    console.log(share);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Share share = smartsheet.ReportResources.ShareResources.GetShare(
  6932724448552836,               // long reportId
  "AQAISF82FOeE"                  // string shareId
);
```

```java
Share share = smartsheet.reportResources().shareResources().getShare(
  665829219035012L,        // long reportId
  "AAAQSF82F1eE"           // string shareId
);
```

```python
share = ss_client.Reports.get_share(
  6932724448552836,       # report_id
  'AAAQSF82F1eE')         # share_id
```

```ruby
share = smartsheet.reports.share.get(
  report_id: 6932724448552836,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /reports/{reportId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Report Shares

> Example Request: List Report Shares

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  reportId: 665829219035012
};

// List report shares
smartsheet.reports.listShares(options)
  .then(function(shareList) {
    console.log(shareList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Share> shares = smartsheet.ReportResources.ShareResources.ListShares(
  665829219035012,        // long reportId
  null,                   // PaginationParameters
  null                    // ShareScope shareScope
);
```

```java
// Omit pagination parameters
PagedResult<Share> shares = smartsheet.reportResources().shareResources().listShares(
  665829219035012L,        // long reportId
  null,                    // PaginationParameters
  true                     // Boolean includeWorkspaceShares
);
```

```python
# Sample 1: List all
response = ss_client.Reports.list_shares(include_all=True)
shares = response.result

# Sample 2: Paginate the list
response = ss_client.Reports.list_shares(
  page_size=10,
  page=1)
pages = response.total_pages
shares = response.result
```

```ruby
response = smartsheet.reports.share.list(
  report_id: 665829219035012
)
shares = response[:data]
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /reports/{reportId}/shares`

Gets a list of all Users and Groups to whom the specified Report is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Report

> Example Request: Share Report

```shell
curl 'https://api.smartsheet.com/2.0/reports/{reportId}/shares?sendEmail=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor)
var share = [
	{
		"email": "jane.doe@smartsheet.com", 
		"accessLevel": "EDITOR"
	}
];

// Set options
var options = {
  reportId: 665829219035012,   
  body: share
  };

// Share report
smartsheet.reports.share(options)
  .then(function(addressList) {
    console.log(addressList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify share (to one user as Editor)
Share[] shareSpecification = new Share[] { new Share
  {
    Email = "jane.doe@smartsheet.com",
    AccessLevel = AccessLevel.EDITOR
  }
};

// Share report
IList<Share> addressList = smartsheet.ReportResources.ShareResources.ShareTo(
  665829219035012,            // long reportId
  shareSpecification,
  true                        // Nullable<bool> sendEmail
);
```

```java
// Specify share (to one user as Editor)
Share shareSpecification = new Share()
  .setEmail("jane.doe@smartsheet.com")
  .setAccessLevel(AccessLevel.EDITOR);

// Share report
List<Share> addressList = smartsheet.reportResources().shareResources().shareTo(
  665829219035012L,        // long reportId
  Arrays.asList(shareSpecification),
  true                     // Boolean sendEmail
);
```

```python
response = ss_client.Reports.share_report(
  665829219035012,        # report_id
  ss_client.models.Share({
    'access_level': 'EDITOR',
    'email': 'jane.doe@smartsheet.com'
  })
)
```

```ruby
body = {
  email: 'jane.doe@smartsheet.com',
  access_level: 'EDITOR',
  subject: 'This report has been shared with you!',
  message: 'This Smartsheet report is ready for your inspection.'
}

response = smartsheet.reports.share.create(
  report_id: 665829219035012,
  body: body
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /reports/{reportId}/shares`

Shares a Report with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Report Share

> Example Request: Update Report Share

```shell
curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set the access level to Viewer
var share = {"accessLevel": "VIEWER"};

// Set options
var options = {
  reportId: 665829219035012,
  shareId: "AAAFeF82FOeE",
  body: share
  };

// Update report share
smartsheet.reports.updateShare(options)
  .then(function(updatedShare) {
    console.log(updatedShare);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set the access level to Viewer
Share shareSpecification = new Share
{
  Id = "AAAFeF82FOeE",
  AccessLevel = AccessLevel.VIEWER
};

// Update report share
Share updatedShare = smartsheet.ReportResources.ShareResources.UpdateShare(
  665829219035012,            // long reportId
  shareSpecification
);
```

```java
// Set the access level to Viewer
Share shareSpecification = new Share();
shareSpecification.setAccessLevel(AccessLevel.VIEWER)
  .setId("AAAFeF82FOeE");   // string shareId

// Update report share
Share updatedShare = smartsheet.reportResources().shareResources().updateShare(
  665829219035012L,                   // long reportId
  shareSpecification
);
```

```python
updated_share = ss_client.Reports.update_share(
  665829219035012,        # report_id
  'AAAFeF82FOeE',         # share_id
  ss_client.models.Share({
    'access_level': 'VIEWER'
  })
)
```

```ruby
body = {
  access_level: 'VIEWER'
}

response = smartsheet.reports.share.update(
  report_id: 665829219035012,
  share_id: 'AAABbMomFOeE',
  body: body
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /reports/{reportId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Report.

<%= partial "snippets/updateShare_table.md.erb" %>

## Sheet Sharing

### Delete Sheet Share

> Example Request: Delete Sheet Share

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 4583614634583940,
  shareId: "AAAASuWWFOeE"
};

// Delete sheet share
smartsheet.sheets.deleteShare(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.ShareResources.DeleteShare(
  4583614634583940,               // long sheetId
  "AAAASuWWFOeE"                  // string shareId
);
```

```java
smartsheet.sheetResources().shareResources().deleteShare(
  4583614634583940L,       // long sheetId
  "AAAASuWWFOeE"           // string shareId
);
```

```python
ss_client.Sheets.delete_share(
  4583614634583940,       # sheet_id
  'AAAFeF82FOeE')         # share_id
```

```ruby
smartsheet.sheets.share.delete(
  sheet_id: 4583173393803140,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sheets/{sheetId}/shares/{shareId}`

Deletes the Share specified in the URL. 

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Sheet Share

> Example Request: Get Sheet Share

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  sheetId: 4583614634583940,
  shareId: "AQAISF82FOeE"
};

// Get sheet share
smartsheet.sheets.getShare(options)
  .then(function(share) {
    console.log(share);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Share share = smartsheet.SheetResources.ShareResources.GetShare(
  4583614634583940,           // long sheetId
  "AQAISF82FOeE"              // string shareId
);
```

```java
Share share = smartsheet.sheetResources().shareResources().getShare(
  4583614634583940L,       // long sheetId
  "AAAASuWWFOeE"           // string shareId
);
```

```python
share = ss_client.Sheets.get_share(
  4583614634583940,       # sheet_id
  'AAAASuWWFOeE')         # share_id
```

```ruby
share = smartsheet.sheets.share.get(
  sheet_id: 4583173393803140,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sheets/{sheetId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Sheet Shares

> Example Request: List Sheet Shares

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  sheetId: 4583614634583940
};

// List sheet shares
smartsheet.sheets.listShares(options)
  .then(function(shareList) {
    console.log(shareList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Share> shares = smartsheet.SheetResources.ShareResources.ListShares(
  4583614634583940,               // long sheetId
  null                            // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Share> shares = smartsheet.sheetResources().shareResources().listShares(
  4583614634583940L,       // long sheetId
  null,                    // PaginationParameters
  true                     // Boolean includeWorkspaceShares
);
```

```python
# Sample 1: List all
response = ss_client.Sheets.list_shares(
  4583614634583940,       # sheet_id
  include_all=True)
shares = response.data

# Sample 2: Paginate the list
response = ss_client.Sheets.list_shares(
  4583614634583940,       # sheet_id
  page_size=10,
  page=1)
pages = response.total_pages
shares = response.data
```

```ruby
response = smartsheet.sheets.share.list(
  sheet_id: 4583173393803140
)
shares = response[:data]
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sheets/{sheetId}/shares`

Gets a list of all Users and Groups to whom the specified Sheet is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Sheet

> Example Request: Share Sheet

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/shares?sendEmail=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor)
var share = [
	{
		"email": "jane.doe@smartsheet.com", 
		"accessLevel": "EDITOR"
	}
];

// Set options
var options = {
  sheetId: 4583614634583940,
  body: share
  };

// Share sheet
smartsheet.sheets.share(options)
  .then(function(addressList) {
    console.log(addressList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify share (to one user as Editor)
Share[] shareSpecification = new Share[] { new Share
  {
    Email = "jane.doe@smartsheet.com",
    AccessLevel = AccessLevel.EDITOR
  }
};

// Share sheet
IList<Share> addressList = smartsheet.SheetResources.ShareResources.ShareTo(
  4583614634583940,               // long sheetId
  shareSpecification,
  true                            // Nullable<bool> sendEmail
);
```

```java
// Specify share (to one user as Editor)
Share shareSpecification = new Share()
  .setEmail("jane.doe@smartsheet.com")
  .setAccessLevel(AccessLevel.EDITOR);

// Share sheet
List<Share> addressList = smartsheet.sheetResources().shareResources().shareTo(
  4583614634583940L,                    // long sheetId
  (Arrays.asList(shareSpecification)),
  true                                  // Boolean sendEmail
);
```

```python
response = ss_client.Sheets.share_sheet(
  4583614634583940,       # sheet_id
  ss_client.models.Share({
    'access_level': 'EDITOR',
    'email': 'jane.doe@smartsheet.com'
  }),
  True                    # sendEmail
)
```

```ruby
body = {
  email: 'jane.doe@smartsheet.com',
  access_level: 'EDITOR',
  subject: 'This sheet has been shared with you!',
  message: 'This Smartsheet is ready for your inspection.'
}

response = smartsheet.sheets.share.create(
  sheet_id: 4583173393803140,
  body: body
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sheets/{sheetId}/shares`

Shares a Sheet with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Sheet Share

> Example Request: Update Sheet Share

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set access level to Viewer
var shareSpecification = {"accessLevel": "VIEWER"};

// Set options
var options = {
  sheetId: 1696801624483716,
  shareId: "AAAHAYImFOeE",
  body: shareSpecification
};

// Update sheet share
smartsheet.sheets.updateShare(options)
  .then(function(updatedShare) {
    console.log(updatedShare);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set the access level to Viewer
Share shareSpecification = new Share
{
  Id = "AAAFeF82FOeE",
  AccessLevel = AccessLevel.VIEWER
};

// Update sheet share
Share updatedShare = smartsheet.SheetResources.ShareResources.UpdateShare(
  4583614634583940,               // long sheetId
  shareSpecification
);
```

```java
// Set the access level to Viewer
Share shareSpecification = new Share()
  .setEmail("jane.doe@smartsheet.com")
  .setAccessLevel(AccessLevel.EDITOR);

// Update sheet share
Share updatedShare = smartsheet.sheetResources().shareResources().updateShare(
  4583614634583940L,       // long sheetId
  shareSpecification
);
```

```python
updated_share = ss_client.Sheets.update_share(
  4583614634583940,       # sheet_id
  'AAAFeF82FOeE',         # share_id
  ss_client.models.Share({
    'access_level': 'VIEWER'
  })
)
```

```ruby
body = {
  access_level: 'VIEWER'
}

response = smartsheet.sheets.share.update(
  sheet_id: 4583173393803140,
  share_id: 'AAABbMomFOeE',
  body: body
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sheets/{sheetId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sheet.

<%= partial "snippets/updateShare_table.md.erb" %>

## Sight Sharing

### Delete Sight Share

> Example Request: Delete Sight Share

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sightId: 6327127650920324,
  shareId: "AAABbMomFOeE"
}

// Delete Sight share
smartsheet.sights.deleteShare(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
smartsheet.sightResources().shareResources().deleteShare(
  6327127650920324L,           // long sightId
  "AAABbMomFOeE"               // string shareId
);
```

```python
ss_client.Sights.delete_share(
  6327127650920324,       # sight_id
  'AAACOqOmFOeE')         # share_id
```

```ruby
smartsheet.sights.share.delete(
  sight_id: 6327127650920324,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sights/{sightId}/shares/{shareId}`

Deletes the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

### Get Sight Share

> Example Request: Get Sight Share

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId}
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  sightId: 6327127650920324,
  shareId: "AAABbMomFOeE"
}

// Get Sight share
smartsheet.sights.getShare(options)
  .then(function(share) {
    console.log(share);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Share share = smartsheet.SightResources.ShareResources.GetShare(
  6327127650920324,           // long sightId
  "AAABbMomFOeE"              // string shareId
);
```

```java
Share share = smartsheet.sightResources().shareResources().getShare(
  6327127650920324L,           // long sightId
  "AAABbMomFOeE"              // string shareId
);
```

```python
share = ss_client.Sights.get_share(
  6327127650920324,       # sight_id
  'AAACOqOmFOeE')         # share_id
```

```ruby
share = smartsheet.sights.share.get(
  sight_id: 6327127650920324,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sights/{sightId}/shares/{shareId}`

Gets the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Share Object](#share-object)

### List Sight Shares

> Example Request: List Sight Shares

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  sightId: 6327127650920324
}

// List Sight shares
smartsheet.sights.listShares(options)
  .then(function(shareList) {
    console.log(shareList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# Sample 1: List all
response = ss_client.Sights.list_shares(
  6327127650920324,       # sight_id
  include_all=True)
shares = response.data

# Sample 2: Paginate the list
response = ss_client.Sights.list_shares(
  6327127650920324,       # sight_id
  page_size=10,
  page=1)
pages = response.total_pages
shares = response.data
```

```ruby
response = smartsheet.sights.share.list(
  sight_id: 6327127650920324
)
shares = response[:data]
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sights/{sightId}/shares`

Gets a list of all Users and Groups to whom the specified Sight is shared, and their access level. 

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of `workspaceShares`, response contains both <i>item-level</i> shares ([<b>scope</b>](#share-object)='ITEM') and <i>workspace-level</i> shares ([<b>scope</b>](#share-object)='WORKSPACE').<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Share Objects](#share-object)<br/><br/>**NOTE:** If the response contains an *item-level* share (**scope**='ITEM') and a *workspace-level* share (**scope**='WORKSPACE') for the same user or group, the **id** of those two [Share](#share-object) Objects is identical, but the **scope** attribute value can be used to disambiguate the two.

### Share Sight

> Example Request: Share Sight

```shell
curl 'https://api.smartsheet.com/2.0/sights/{sightId}/shares?sendEmail=true'
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json"
-X POST
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "VIEWER"}]'
```

```javascript
// Specify share (to one user as Viewer)
var share = [
  {
    "email": "jane.doe@smartsheet.com",
    "accessLevel": "VIEWER"
  }
];

// Set options
var options = {
  sightId: 6327127650920324,
  body: share
};

// Share Sight
smartsheet.sights.share(options)
  .then(function(addressList) {
    console.log(addressList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// Specify share (to one user as Viewer)
Share shareSpecification = new Share()
  .setEmail("jane.doe@smartsheet.com")
  .setAccessLevel(AccessLevel.VIEWER);

// Share sight
List<Share> addressList = smartsheet.sightResources().shareResources().shareTo(
  4583614634583940L,                    // long sightId
  (Arrays.asList(shareSpecification)),
  true                                  // Boolean sendEmail
);
```

```python
response = ss_client.Sights.share_sight(
  6327127650920324,       # sight_id
  ss_client.models.Share({
    'access_level': 'VIEWER',
    'email': 'jane.doe@smartsheet.com'
  }),
  True                    # sendEmail
)
```

```ruby
body = {
  email: 'jane.doe@smartsheet.com',
  access_level: 'VIEWER',
  subject: 'This sight has been shared with you!',
  message: 'This Smartsheet sight is ready for your inspection.'
}

response = smartsheet.sights.share.create(
  sight_id: 6327127650920324,
  body: body
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sights/{sightId}/shares`

Shares a Sight with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | [Share Object](#share-object) or an array of Share Objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group Id</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that is optionally sent to notify the recipient.</li><li>message (optional): The message in the body of the email that is optionally sent to the recipient.</li><li>ccMe (optional): Boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | [Result Object](#result-object) containing either a single [Share Object](#share-object) or an array of Share Objects, corresponding to what was specified in the request. All shares have <b>[scope](#share-object)</b>="ITEM".
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-addresses) (that is, not the primary email address associated with the User account), the [Error Object](#error-object) returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Sight Share

> Example Request: Update Sight Share

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set access level to Viewer
var shareSpecification = {"accessLevel": "VIEWER"};

// Set options
var options = {
  sightId: 6327127650920324,
  shareId: "AAALRqomFOeE",
  body: shareSpecification
};

// Update Sight share
smartsheet.sights.updateShare(options)
  .then(function(updatedShare) {
    console.log(updatedShare);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// Set the access level to Viewer
Share shareSpecification = new Share();
shareSpecification.setAccessLevel(AccessLevel.VIEWER)
  .setId("AAAFeF82FOeE");   // string shareId

// Update Sight share
Share updatedShare = smartsheet.sightResources().shareResources().updateShare(
  6327127650920324L,       // long sightId
  shareSpecification
);
```

```python
updated_share = ss_client.Sights.update_share(
  6327127650920324,       # sight_id
  'AAALRqomFOeE',         # share_id
  ss_client.models.Share({
    'access_level': 'VIEWER'
  })
)
```

```ruby
body = {
  access_level: 'VIEWER'
}

response = smartsheet.sights.share.update(
  sight_id: 6327127650920324,
  share_id: 'AAABbMomFOeE',
  body: body
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sights/{sightId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Share Object](#share-object) limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing the modified [Share Object](#share-object)

## Workspace Sharing

### Delete Workspace Share

> Example Request: Delete Workspace Share

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  workspaceId: 1656220827314052,
  shareId: "AAAEQesWFOeE"
};

// Delete workspace share
smartsheet.workspaces.deleteShare(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.WorkspaceResources.ShareResources.DeleteShare(
  1656220827314052,               // long workspaceId
  "AAAEQesWFOeE"                  // string shareId
);
```

```java
smartsheet.workspaceResources().shareResources().deleteShare(
  1656220827314052L,       // long workspaceId
  "AAAEQesWFOeE"           // string shareId
);
```

```python
ss_client.Workspaces.delete_share(
  1656220827314052,           # workspace_id
  'AAAEQesWFOeE')             # share_id
```

```ruby
smartsheet.workspaces.share.delete(
  workspace_id: 1656220827314052,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /workspaces/{workspaceId}/shares/{shareId}`

Deletes the Share specified in the URL. 

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

### Get Workspace Share

> Example Request: Get Workspace Share

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  workspaceId: 1656220827314052,
  shareId: "AQAISF82FOeE"
};

// Get workspace share
smartsheet.workspaces.getShare(options)
  .then(function(share) {
    console.log(share);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Share share = smartsheet.WorkspaceResources.ShareResources.GetShare(
  1656220827314052,           // long workspaceId
  "AQAISF82FOeE"              // string shareId
);
```

```java
Share share = smartsheet.workspaceResources().shareResources().getShare(
  1656220827314052L,       // long workspaceId
  "AQAISF82FOeE"           // string shareId
);
```

```python
share = ss_client.Sheets.get_share(
  1656220827314052,           # workspace_id
  'AAAEQesWFOeE')             # share_id
```

```ruby
share = smartsheet.workspaces.share.get(
  workspace_id: 1656220827314052,
  share_id: 'AAABbMomFOeE'
)
```

> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares/{shareId}`

Gets the Share specified in the URL. 

<%= partial "snippets/getShare_table.md.erb" %>

### List Workspace Shares

> Example Request: List Workspace Shares

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Set options
var options = {
  workspaceId: 1656220827314052
};

// List workspace shares
smartsheet.workspaces.listShares(options)
  .then(function(shareList) {
    console.log(shareList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Share> shares = smartsheet.WorkspaceResources.ShareResources.ListShares(
  1656220827314052,               // long workspaceId
  null                            // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Share> shares = smartsheet.workspaceResources().shareResources().listShares(
  1656220827314052L,       // long workspaceId
  null,                    // PaginationParameters
  true                     // Boolean includeWorkspaceShares
);
```

```python
# Sample 1: List all
response = ss_client.Workspaces.list_shares(
  1656220827314052,       # workspace_id
  include_all=True)
shares = response.data

# Sample 2: Paginate the list
response = ss_client.Workspaces.list_shares(
  1656220827314052,       # workspace_id
  page_size=10,
  page=1)
pages = response.total_pages
shares = response.data
```

```ruby
response = smartsheet.workspaces.share.list(
  workspace_id: 1656220827314052
)
shares = response[:data]
```

> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares`

Gets a list of all Users and Groups to whom the specified Workspace is shared, and their access level. 

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Share Objects](#share-object)

### Share Workspace

> Example Request: Share Workspace

```shell
curl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares?sendEmail=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "jane.doe@smartsheet.com", "accessLevel": "EDITOR"}]'
```

```javascript
// Specify share (to one user as Editor)
var shares = [
	{
		"email": "john.doe@smartsheet.com",
		"accessLevel": "EDITOR"
	}
];

// Set options
var options = {
	workspaceId: 7960873114331012,
	body: shares
};

// Share workspace
smartsheet.workspaces.share(options)
	.then(function(addressList) {
		console.log(addressList);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify share (to one user as Editor)
Share[] shareSpecification = new Share[] { new Share
  {
    Email = "jane.doe@smartsheet.com",
    AccessLevel = AccessLevel.EDITOR
  }
};

// Share workspace
IList<Share> addressList = smartsheet.WorkspaceResources.ShareResources.ShareTo(
  7960873114331012,               // long workspaceId
  shareSpecification,
  true                            // Nullable<bool> sendEmail
);
```

```java
// Specify share (to one user as Editor)
Share shareSpecification = new Share()
  .setEmail("jane.doe@smartsheet.com")
  .setAccessLevel(AccessLevel.EDITOR);

// Share workspace
List<Share> addressList = smartsheet.workspaceResources().shareResources().shareTo(
  7960873114331012L,                    // long workspaceId
  (Arrays.asList(shareSpecification)),
  true                                  // Boolean sendEmail
);
```

```python
response = ss_client.Workspaces.share_workspace(
  1656220827314052,       # workspace_id
  ss_client.models.Share({
    'access_level': 'EDITOR',
    'email': 'jane.doe@smartsheet.com'
  })
)
```

```ruby
body = {
  email: 'jane.doe@smartsheet.com',
  access_level: 'EDITOR',
  subject: 'This workspace has been shared with you!',
  message: 'This Smartsheet workspace is ready for your inspection.'
}

response = smartsheet.workspaces.share.create(
  workspace_id: 1656220827314052,
  body: body
)
```

> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /workspaces/{workspaceId}/shares`

Shares a Workspace with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | [Share Object](#share-object) or an array of Share Objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group Id</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that is optionally sent to notify the recipient.</li><li>message (optional): The message in the body of the email that is optionally sent to the recipient.</li><li>ccMe (optional): Boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | [Result Object](#result-object) containing either a single [Share Object](#share-object) or an array of Share Objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more [*alternate* email addresses](#alternate-email-addresses) (that is, not the primary email address associated with the User account), the [Error Object](#error-object) returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Workspace Share

> Example Request: Update Workspace Share

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"accessLevel": "VIEWER"}'
```

```javascript
// Set access level to Viewer
var share = {"accessLevel": "VIEWER"};

// Set options
var options = {
  workspaceId: 1656220827314052,
  shareId: "AAAFeF82FOeE",
  body: share
  };

// Update workspace share
smartsheet.workspaces.updateShare(options)
  .then(function(updatedShare) {
    console.log(updatedShare);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set the access level to Viewer
Share shareSpecification = new Share
{
  Id = "AAAFeF82FOeE",
  AccessLevel = AccessLevel.VIEWER
};

// Update workspace share
Share updatedShare = smartsheet.WorkspaceResources.ShareResources.UpdateShare(
  1656220827314052,             // long workspaceId
  shareSpecification
);
```

```java
// Set the access level to Viewer
Share shareSpecification = new Share();
shareSpecification.setAccessLevel(AccessLevel.VIEWER)
  .setId("AAAFeF82FOeE");   // string shareId

// Update workspace share
Share updatedShare = smartsheet.workspaceResources().shareResources().updateShare(
  1656220827314052L,   // long workspaceId
  shareSpecification
);
```

```python
updated_share = ss_client.Workspaces.update_share(
  1656220827314052,       # workspace_id
  'AAAFeF82FOeE',         # share_id
  ss_client.models.Share({
    'access_level': 'VIEWER'
  })
)
```

```ruby
body = {
  access_level: 'VIEWER'
}

response = smartsheet.workspaces.share.update(
  workspace_id: 1656220827314052,
  share_id: 'AAABbMomFOeE',
  body: body
)
```

> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /workspaces/{workspaceId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Share Object](#share-object) limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing the modified [Share Object](#share-object)

# Sheets

A Sheet can exist in a user's **Sheets** folder ([Home](#home)), in a [Folder](#folders), or in a [Workspace](#workspaces). It is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Sheet Object

> Example Sheet Object:

```json
{
  "accessLevel": "OWNER",
  "projectSettings": {
    "workingDays": [],
    "nonWorkingDays": [],
    "lengthOfDay": 6
  },
  "columns": [],
  "createdAt": "2012-07-24T18:22:29-07:00",
  "id": 4583173393803140,
  "modifiedAt": "2012-07-24T18:30:52-07:00",
  "name": "sheet 1",
  "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
  "rows": []
}
```

     |     |     |
-----|-----|-----|
**id** | number | Sheet Id
**name** | string | Sheet name
**version** | number | A number that is incremented every time a Sheet is modified
**totalRowCount** | number | The total number of rows in the Sheet
**accessLevel** | string | User's permissions on the Sheet
**projectSettings** | [ProjectSettings](#projectsettings-object) | Sheet's project settings containing the working days, non-working days, and length of day for a project sheet
**effectiveAttachmentOptions** | array | Array of enum strings (see [Attachment.attachmentType](#attachment-object)) indicating the allowable attachment options for the current User and Sheet
**readOnly** | Boolean | Returned only if the Sheet belongs to an expired trial (value = 'true')
**ganttEnabled** | Boolean | Flag to indicate that Gantt is enabled
**dependenciesEnabled** | Boolean | Flag to indicate that dependencies are enabled
**resourceManagementEnabled** | Boolean | Flag to indicate that resource management is enabled
**favorite** | Boolean | Returned only if the User has marked this sheet as a favorite in their Home tab (value = 'true')
**showParentRowsForFilters** | Boolean | Returned only if there are column filters on the Sheet.  Value = 'true' if "show parent rows" is enabled for the filters.
**userSettings** | [SheetUserSettings](#sheetusersettings-object) | A SheetUserSettings Object containing the current user's sheet-specific settings.
**owner** | string | Email address of the Sheet owner
**ownerId** | number | User Id of the Sheet owner
**permalink** | string | URL that represents a direct link to the Sheet in Smartsheet
**source** | [Source](#source-object) | A Source Object indicating the Sheet or Template from which this sheet was created
**createdAt** | timestamp | Time that the Sheet was created
**modifiedAt** | timestamp | Time that the Sheet was modified
**columns** | [Column](#column-object)[] | Array of Column Objects
**rows** | [Row](#row-object)[] | Array of Row Objects
**attachments** | [Attachment](#attachment-object)[] | Array of Attachment Objects<br/>Only returned if the [**include**](#get-sheet) query string parameter contains **attachments**.
**crossSheetReferences** | [CrossSheetReference](#crosssheetreference-object)[] | Array of CrossSheetReference Objects<br/>Only returned if the [**include**](#get-sheet) query string parameter contains **crossSheetReferences**.
**discussions** | [Discussion](#discussion-object)[] | Array of Discussion Objects<br/>Only returned if the [**include**](#get-sheet) query string parameter contains **discussions**.
**fromId** | number | The Id of the Template from which to create the Sheet. This attribute can be specified in a request, but is never present in a response.

### Criteria Object

> Example Criteria Object:

```json
{
  "operator": "IS_ONE_OF",
  "values": [
    "Complete"
  ],
  "columnId": 675838380271492
}
```

     |     |     |
-----|-----|-----|
**operator** | string | One of the following values:<ul><li>EQUAL</li><li>NOT_EQUAL</li><li>GREATER_THAN</li><li>LESS_THAN</li><li>CONTAINS</li><li>BETWEEN</li><li>TODAY</li><li>PAST</li><li>FUTURE</li><li>LAST_N_DAYS</li><li>NEXT_N_DAYS</li><li>IS_BLANK</li><li>IS_NOT_BLANK</li><li>IS_NUMBER</li><li>IS_NOT_NUMBER</li><li>IS_DATE</li><li>IS_NOT_DATE</li><li>IS_CHECKED</li><li>IS_NOT_CHECKED</li></ul>
**values** | array | Optional. Present if a custom filter criteria's operator has one or more arguments.
**columnId** | number | Column Id

### Filters Object

> Example Filters Object:

```json
{
  "id": 7182478625531780,
  "filterType": "PERSONAL",
  "query": {
    "operator": "AND",
    "criteria": [],
    "includeParent": false
  }
}
```

Smartsheet users can define and save personal column filters on sheets they can view. To see whether a row has been included or excluded with a filter, invoke the "include=filters" query string, which returns a `row.filteredOut` = `true` or `false` response for rows that are excluded by a filter. To see how the filter has been defined, invoke the "include=filterDefinitions" query string parameter.

     |     |     |
-----|-----|-----|
**id** | number | Filters Id
**filterType** | string | One of the following values:<ul><li>PERSONAL</li><li>SHARED</li></ul>
**query** | object | Contains operator and Criteria Object.
**operator** | string | One of the following values:<ul><li>EQUAL</li><li>NOT_EQUAL</li><li>GREATER_THAN</li><li>LESS_THAN</li><li>CONTAINS</li><li>BETWEEN</li><li>TODAY</li><li>PAST</li><li>FUTURE</li><li>LAST_N_DAYS</li><li>NEXT_N_DAYS</li><li>IS_BLANK</li><li>IS_NOT_BLANK</li><li>IS_NUMBER</li><li>IS_NOT_NUMBER</li><li>IS_DATE</li><li>IS_NOT_DATE</li><li>IS_CHECKED</li><li>IS_NOT_CHECKED</li></ul>
**includeParent** | Boolean | If **true**, indicates that "show parent rows" is enabled for the filters.
**excludeSelected** | Boolean | If **true**, rows containing cells matching the "values" or "criteria" items are excluded instead of included.
**values** | array | Optional. Present if a custom filter criteria's operator has one or more arguments.
**criteria** | [Criteria](#criteria-object)[] | An array of Criteria Objects specifying custom criteria against which to match cell values.

### ProjectSettings Object

Represents the project settings dependencies for a specific sheet.  Project settings may be updated on sheets that the user has editor access.

     |     |     |
-----|-----|-----|
**workingDays** | String[] | Working days of a week for a project sheet. Valid values must be an array of strings of days of the week: <ul><li>MONDAY</li><li>TUESDAY</li><li>WEDNESDAY</li><li>THURSDAY</li><li>FRIDAY</li><li>SATURDAY</li><li>SUNDAY</li></ul>
**nonWorkingDays** | timestamp[] | Non-working days for a project sheet. The format for the timestamp array must be an array of strings that are valid [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) dates ('YYYY-MM-DD').
**lengthOfDay** | number | Length of a workday for a project sheet. Valid value must be above or equal to 1 hour, and less than or equal to 24 hours.

### SheetPublish Object 

     |     |     |
-----|-----|-----|
**icalEnabled** | Boolean | (Required) If `true`, a webcal is available for the calendar in the sheet.
**readOnlyFullEnabled** | Boolean | (Required) If `true`, a rich version of the sheet is published with the ability to download row attachments and discussions.
**readOnlyLiteEnabled** | Boolean | (Required) If `true`, a lightweight version of the sheet is published without row attachments or discussions.
**readWriteEnabled** | Boolean | (Required) If `true`, a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.
**icalUrl** | string | URL for 'iCal' view of the published sheet<br/>Only returned in a response if **icalEnabled** = true.
**readOnlyFullAccessibleBy** | string | Indicates who can access the 'Read-Only Full' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
**readOnlyFullDefaultView** | string | Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the following values: "CALENDAR", "CARD", or "GRID".
**readOnlyFullShowToolbar** | Boolean | Indicates whether the left nav toolbar is displayed. The default, or `true`, is to display the toolbar. If `false`, hides the toolbar.
**readOnlyFullUrl** | string | URL for 'Read-Only Full' view of the published sheet<br/>Only returned in a response if **readOnlyFullEnabled** = true.
**readOnlyLiteSslUrl** | string | URL for 'Read-Only' view of the published sheet when SSL is enabled. 
**readOnlyLiteUrl** | string | URL for 'Read-Only HTML' view of the published sheet<br/>Only returned in a response if **readOnlyLiteEnabled** = true.
**readWriteAccessibleBy** | string | Indicates who can access the 'Edit by Anyone' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readWriteEnabled** = true.
**readWriteDefaultView** | string | Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the following values: "CALENDAR", "CARD", or "GRID".
**readWriteShowToolbar** | Boolean | Indicates whether the left nav toolbar is displayed. The default, or `true`, is to display the toolbar. If `false`, hides the toolbar.
**readWriteUrl** | string | URL for 'Edit by Anyone' view of the published sheet<br/>Only returned in a response if **readWriteEnabled** = true.

### SheetUserSettings Object

Represents individual user settings for a specific sheet.  User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet).

     |     |     |
-----|-----|-----|
**criticalPathEnabled** | Boolean | Does this user have "Show Critical Path" turned on for this sheet?  Note this setting only has an effect on project sheets with dependencies enabled.
**displaySummaryTasks** | Boolean | Does this user have "Display Summary Tasks" turned on for this sheet?  Applies only to sheets where Calendar View has been configured.

### SortCriterion Object

     |     |     |
-----|-----|-----|
**columnId** | number | Column Id
**direction** | string | The direction for the sort. Must be one of the following values: "ASCENDING" (default) or "DESCENDING"

### SortSpecifier Object

     |     |     |
-----|-----|-----|
**sortCriteria** | [SortCriterion](#sortcriterion-object)[] | Specifies sort order. Array is in priority order.

### Source Object

     |     |     |
-----|-----|-----|
**id** | number | Id of the Sheet or Template from which the enclosing sheet was created
**type** | string | "sheet" or "template"

## Copy Sheet

> Example Request: Copy Sheet

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/copy?include=data,attachments'
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json"
-d '{
  "destinationType": "folder",
  "destinationId": 7960873114331012,
  "newName": "newSheetName"
}'
-X POST
```

```javascript
// Set destination information
var body = {
  destinationType: "home",
  newName: "newSheetName"
};

// Set elements to copy
var params = {
  include: "attachments,data",
  includeAll: true
};

// Set options
var options = {
  sheetId: 7254137655060356,
  body: body,
  queryParameters: params
};

// Copy sheet
smartsheet.sheets.copySheet(options)
  .then(function(copiedSheet) {
    console.log(copiedSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination {
  DestinationId = 3791509922310020,               // long destinationFolderId
  DestinationType = DestinationType.FOLDER,
  NewName = "newSheetName"
};

// Sample 1: Omit 'include' parameter
Sheet sheet = smartsheet.SheetResources.CopySheet(
  9283173393803140,                               // long sheetId
  destination,
  null                                            // IEnumerable<SheetCopyInclusion> include
);

// Sample 2: Specify 'include' parameter with value of "data"
Sheet sheet = smartsheet.SheetResources.CopySheet(
  9283173393803140,                               // long sheetId
  destination,
  new SheetCopyInclusion[] { SheetCopyInclusion.DATA }
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination()
  .setDestinationType(DestinationType.FOLDER)
  .setDestinationId(9283173393803140L)
  .setNewName("newSheetName");

// Sample 1: Omit 'include' parameter
Sheet sheet = smartsheet.sheetResources().copySheet(
  4583173393803140L,                          // long sheetId
  destination,
  null                                        // EnumSet<SheetCopyInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "data"
Sheet sheet = smartsheet.sheetResources().copySheet(
  4583173393803140L,                         // long sheetId
  destination,
  EnumSet.of(SheetCopyInclusion.DATA)
);
```

```python
response = ss_client.Sheets.copy_sheet(
  4583173393803140,                               # sheet_id
  ss_client.models.ContainerDestination({
    'destination_type': 'folder',               # folder, workspace, or home
    'destination_id': 9283173393803140,         # folder_id
    'new_name': 'newSheetName'
  })
)
```

```ruby
body = {
  destination_type: 'folder',
  destination_id: 9283173393803140,
  new_name: 'newSheetName'
}

smartsheet.sheets.copy(
  sheet_id: 4583173393803140,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 4366633289443204,
    "name": "newSheetName",
    "accessLevel": "OWNER",
    "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /sheets/{sheetId}/copy`

Creates a copy of the specified Sheet.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to copy:<ul><li>attachments</li><li>cellLinks</li><li>data -- includes formatting</li><li>discussions -- includes comments</li><li>forms</li><li>ruleRecipients -- includes notification recipients, must also include **rules** when using this attribute</li><li>rules -- includes notifications and workflow rules</li><li>shares</li><li>all - deprecated</li></ul><i>Note</i>: Cell history is not copied, regardless of which **include** parameter values are specified.
 | **omit** (optional) -- when specified with a value of "sheetHyperlinks", excludes this category from the response
<%= REQUEST %> | [ContainerDestination Object](#containerdestination-object)
<%= RETURNS %> | [Result Object](#result-object) containing a [Sheet Object](#sheet-object) for the newly created Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Create Sheet

### Create Sheet in "Sheets" folder

> Example Request: Create Sheet in "Sheets" folder

```shell
curl https://api.smartsheet.com/2.0/sheets \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}]}'
```

```javascript
// Specify sheet properties
var sheet = {
  "name": "newsheet",
  "columns": [
    {
      "title": "Favorite",
      "type": "CHECKBOX",
      "symbol": "STAR"
    },
    {
      "title": "Primary Column",
      "primary": true,
      "type": "TEXT_NUMBER"
    }
  ]
};

// Set options
var options = {
  body: sheet
};

// Create sheet in "Sheets" folder
smartsheet.sheets.createSheet(options)
	.then(function(newSheet) {
		console.log(newSheet);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify properties of the first column
Column columnA = new Column
{
  Title = "Favorite",
  Primary = false,
  Type = ColumnType.CHECKBOX,
  Symbol = Symbol.STAR
};

// Specify properties of the second column
Column columnB = new Column
{
  Title = "Primary Column",
  Primary = true,
  Type = ColumnType.TEXT_NUMBER
};

// Create sheet in "Sheets" folder (specifying the 2 columns to include in the sheet)
Sheet newSheet = smartsheet.SheetResources.CreateSheet(new Sheet
{
  Name = "newsheet",
  Columns = new Column[] { columnA, columnB }
}
);
```

```java
// Specify properties of the first column
Column columnA = new Column()
  .setTitle("Favorite")
  .setType(ColumnType.CHECKBOX)
  .setSymbol(Symbol.STAR);

// Specify properties of the second column
Column columnB = new Column()
  .setTitle("Primary Column")
  .setType(ColumnType.TEXT_NUMBER)
  .setPrimary(true);

// Create sheet in "Sheets" folder (specifying the 2 columns to include in the sheet)
Sheet newSheet = new Sheet();
newSheet.setName("newsheet");
newSheet.setColumns(Arrays.asList(columnA, columnB));

smartsheet.sheetResources().createSheet(newSheet);
```

```python
sheet_spec = ss_client.models.Sheet({
  'name': 'newsheet',
  'columns': [{
      'title': 'Favorite',
      'type': 'CHECKBOX',
      'symbol': 'STAR'
    }, {
      'title': 'Primary Column',
      'primary': True,
      'type': 'TEXT_NUMBER'
    }
  ]
})
response = ss_client.Home.create_sheet(sheet_spec)
new_sheet = response.result
```

```ruby
body = {
  name: 'newsheet',
  columns: [
    {
      title: 'Favorite',
      type: 'CHECKBOX',
      symbol: 'STAR',
      width: 10
    },
    {
      title: 'Primary Column',
      type: 'TEXT_NUMBER',
      primary: true
    }
  ]
}

response = smartsheet.sheets.create(
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /sheets`

Creates a Sheet from scratch in the user's **Sheets** folder ([Home](#home)). For subfolders, use [Create Sheet in Folder](#create-sheet-in-folder). 

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Folder

> Example Request: Create Sheet in Folder

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/sheets \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}]}'
```

```javascript
// Specify sheet properties
var sheet = {
  "name": "newsheet",
  "columns": [
    {
      "title": "Favorite",
      "type": "CHECKBOX",
      "symbol": "STAR"
    },
    {
      "title": "Primary Column",
      "primary": true,
      "type": "TEXT_NUMBER"
    }
  ]
};

// Set options
var options = {
  folderId: 3734419270854532,
  body: sheet
  };

// Create sheet in folder
smartsheet.sheets.createSheetInFolder(options)
  .then(function(newSheet) {
    console.log(newSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify properties of the first column
Column columnA = new Column
{
  Title = "Favorite",
  Primary = false,
  Type = ColumnType.CHECKBOX,
  Symbol = Symbol.STAR
};

// Specify properties of the second column
Column columnB = new Column
{
  Title = "Primary Column",
  Primary = true,
  Type = ColumnType.TEXT_NUMBER
};

// Create sheet in folder (specifying the 2 columns to include in the sheet)
Sheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheet(
  3734419270854532,                   // long folderId
  new Sheet
    {
      Name = "new sheet title",
      Columns = new Column[] { columnA, columnB }
    }
);
```

```java
// Specify properties of the first column
Column columnA = new Column()
  .setTitle("Favorite")
  .setType(ColumnType.CHECKBOX)
  .setSymbol(Symbol.STAR);

// Specify properties of the second column
Column columnB = new Column()
  .setTitle("Primary Column")
  .setType(ColumnType.TEXT_NUMBER)
  .setPrimary(true);

// Create sheet in folder (specifying the 2 columns to include in the sheet)
Sheet newSheet = new Sheet();
newSheet.setName("new sheet title");
newSheet.setColumns(Arrays.asList(columnA, columnB));

smartsheet.sheetResources().createSheetInFolder(
  3734419270854532L,  // long folderId
  newSheet
); 
```

```python
sheet_spec = ss_client.models.Sheet({
  'name': 'newsheet',
  'columns': [{
        'title': 'Favorite',
        'type': 'CHECKBOX',
        'symbol': 'STAR'
      }, {
        'title': 'Primary Column',
        'primary': True,
        'type': 'TEXT_NUMBER'
      }
  ]
})
response = ss_client.Folders.create_sheet_in_folder(
  3734419270854532,       # folder_id
  sheet_spec)
new_sheet = response.result
```

```ruby
body = {
  name: 'newsheet',
  columns: [
    {
      title: 'Favorite',
      type: 'CHECKBOX',
      symbol: 'STAR',
      width: 10
    },
    {
      title: 'Primary Column',
      type: 'TEXT_NUMBER',
      primary: true
    }
  ]
}

response = smartsheet.sheets.create_in_folder(
  folder_id: 3734419270854532,
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet from scratch in the specified Folder.

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Workspace 

> Example Request: Create Sheet in Workspace

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet","columns":[{"title":"Favorite","type":"CHECKBOX","symbol":"STAR"}, {"title":"Primary Column", "primary":true,"type":"TEXT_NUMBER"}]}'
```

```javascript
// Specify sheet properties
var sheet = {
  "name": "newsheet",
  "columns": [
    {
      "title": "Favorite",
      "type": "CHECKBOX",
      "symbol": "STAR"
    },
    {
      "title": "Primary Column",
      "primary": true,
      "type": "TEXT_NUMBER"
    }
  ]
};

// Set options
var options = {
  workspaceId: 1656220827314052,
  body: sheet
};

// Create sheet in workspace
smartsheet.sheets.createSheetInWorkspace(options)
  .then(function(newSheet) {
    console.log(newSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify properties of the first column
Column columnA = new Column
{
  Title = "Favorite",
  Primary = false,
  Type = ColumnType.CHECKBOX,
  Symbol = Symbol.STAR
};

// Specify properties of the second column
Column columnB = new Column
{
  Title = "Primary Column",
  Primary = true,
  Type = ColumnType.TEXT_NUMBER
};

// Create sheet in workspace (specifying the 2 columns to include in the sheet)
Sheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheet(
  3734419270854532,                   // long workspaceId
  new Sheet
    {
      Name = "new sheet title",
      Columns = new Column[] { columnA, columnB }
    }
);
```

```java
// Specify properties of the first column
Column columnA = new Column()
  .setTitle("Favorite")
  .setType(ColumnType.CHECKBOX)
  .setSymbol(Symbol.STAR);

// Specify properties of the second column
Column columnB = new Column()
  .setTitle("Primary Column")
  .setType(ColumnType.TEXT_NUMBER)
  .setPrimary(true);

// Create sheet in workspace (specifying the 2 columns to include in the sheet)
Sheet newSheet = new Sheet();
newSheet.setName("new sheet title");
newSheet.setColumns(Arrays.asList(columnA, columnB));

smartsheet.sheetResources().createSheetInWorkspace(
  3734419270854532L,    // long workspaceId
  newSheet
);
```

```python
sheet_spec = ss_client.models.Sheet({
  'name': 'newsheet',
  'columns': [{
      'title': 'Favorite',
      'type': 'CHECKBOX',
      'symbol': 'STAR'
    }, {
      'title': 'Primary Column',
      'primary': True,
      'type': 'TEXT_NUMBER'
    }
  ]
})

response = ss_client.Workspaces.create_sheet_in_workspace(
  3734419270854532,           # workspace_id
  sheet_spec)
new_sheet = response.result
```

```ruby
body = {
  name: 'newsheet',
  columns: [
    {
      title: 'Favorite',
      type: 'CHECKBOX',
      symbol: 'STAR',
      width: 10
    },
    {
      title: 'Primary Column',
      type: 'TEXT_NUMBER',
      primary: true
    }
  ]
}

response = smartsheet.sheets.create_in_workspace(
  workspace_id: 3734419270854532,
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet from scratch at the top-level of the specified Workspace. For subfolders, use [Create Sheet in Folder](#create-sheet-in-folder).

<%= partial "snippets/createSheet_table.md.erb" %>

## Create Sheet from Template

### Create Sheet in "Sheets" Folder From Template

> Example Request: Create Sheet in "Sheets" Folder From Template

```shell
curl 'https://api.smartsheet.com/2.0/sheets?include=data,attachments,discussions' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": templateId}'
```

```javascript
// Specify the directive
var sheet = {
  "fromId": 7679398137620356,
  "name": "newsheet"
  };

// Set options
var options = {
  body: sheet
};

// Create sheet from template
smartsheet.sheets.createSheetFromExisting(options)
  .then(function(newSheet) {
    console.log(newSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify name for the sheet and Id of the template
Sheet sheetSpecification = new Sheet
{
  Name = "new sheet title",
  FromId = 7679398137620356     // template Id
};

// Sample 1: Omit 'include' parameter
Sheet newSheet = smartsheet.SheetResources.CreateSheetFromTemplate(
  sheetSpecification,
  null                            // IEnumerable<TemplateInclusion> include
);

// Sample 2: Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet newSheet = smartsheet.SheetResources.CreateSheetFromTemplate(
  sheetSpecification,
  new TemplateInclusion[] {
    TemplateInclusion.ATTACHMENTS,
    TemplateInclusion.DATA,
    TemplateInclusion.DISCUSSIONS }
);
```

```java
// Specify name for the sheet and Id of the template
Sheet sheet = new Sheet();
sheet.setFromId(7679398137620356L);     // long templateId
sheet.setName("newsheet");

// Sample 1: Omit 'include' parameter
Sheet results = smartsheet.sheetResources().createSheetFromTemplate(sheet,
  null                                    // EnumSet<SheetTemplateInclusion> includes
);

// Sample 2: Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet results = smartsheet.sheetResources().createSheetFromTemplate(
  sheet,
  EnumSet.of(
    SheetTemplateInclusion.ATTACHMENTS,
    SheetTemplateInclusion.DATA,
    SheetTemplateInclusion.DISCUSSIONS)
);
```

```python
response = ss_client.Home.create_sheet_from_template(
  ss_client.models.Sheet({
    'name': 'newsheet',
    'from_id': 7679398137620356     # template_id
  })
)
new_sheet = response.result
```

```ruby
body = {
  name: 'newsheet',
  from_id: 7679398137620356
}

response = smartsheet.sheets.create_from_template(
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /sheets`

Creates a Sheet in the user's **Sheets** folder ([Home](#home)), from the specified Template. For subfolders, use [Create Sheet in Folder from Template](#create-sheet-in-folder-from-template).

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Folder From Template

> Example Request: Create Sheet in Folder From Template

```shell
curl 'https://api.smartsheet.com/2.0/folders/{folderId}/sheets?include=data,attachments,discussions' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": 7679398137620356}'
```

```javascript
// Specify the directive
var sheet = {
  "name": "newsheet",
  "fromId": 7679398137620356
};

// Set options
var options = {
  body: sheet,
  folderId: 3734419270854532
};

// Create sheet from template in the specified folder
smartsheet.sheets.createSheetFromExisting(options)
  .then(function(data) {
    console.log(data);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify name for the sheet and Id of the template
Sheet sheetSpecification = new Sheet
{
  Name = "new sheet title",
  FromId = 7679398137620356     // template Id
};

// Sample 1: Omit 'include' parameter
Sheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(
  3734419270854532,               // long folderId
  sheetSpecification,
  null                            // IEnumerable<TemplateInclusion> include
);

// Sample 2: Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(
  3734419270854532,               // long folderId
  sheetSpecification,
  new TemplateInclusion[] {
    TemplateInclusion.ATTACHMENTS,
    TemplateInclusion.DATA,
    TemplateInclusion.DISCUSSIONS }
);
```

```java
// Specify name for the sheet and Id of the template
Sheet sheet = new Sheet();
sheet.setFromId(7679398137620356L);     // long templateId
sheet.setName("newsheet");

// Omit 'include' parameter
Sheet results = smartsheet.sheetResources().createSheetInFolderFromTemplate(
  3734419270854532L,                  // long folderId
  sheet,
  null                                // EnumSet<SheetTemplateInclusion> includes
);

// Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet results = smartsheet.sheetResources().createSheetInFolderFromTemplate(
  3734419270854532L,                 // long folderId
  sheet,
  EnumSet.of(
    SheetTemplateInclusion.ATTACHMENTS,
    SheetTemplateInclusion.DATA,
    SheetTemplateInclusion.DISCUSSIONS)
);	
```

```python
response = ss_client.Folders.create_sheet_in_folder_from_template(
  3734419270854532,                   # folder_id
  ss_client.models.Sheet({
    'name': 'newsheet',
    'from_id': 7679398137620356       # template_id
  })
)
```

```ruby
body = {
  name: 'newsheet',
  from_id: 7679398137620356
}

response = smartsheet.sheets.create_in_folder_from_template(
  folder_id: 3734419270854532,
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet in the specified Folder, from the specified Template.

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Workspace From Template

> Example Request: Create Sheet in Workspace From Template

```shell
curl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets?include=data,attachments,discussions' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"newsheet", "fromId": 7679398137620356}'
```

```javascript
// Specify the directive
var sheet = {
  "fromId": 7679398137620356,
  "name": "newsheet"
  };

// Set options
var options = {
  workspaceId: 1656220827314052,
  body: sheet
  };

// Create sheet from template in the specified workspace
smartsheet.sheets.createSheetFromExisting(options)
  .then(function(newSheet) {
    console.log(newSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify name for the sheet and Id of the template
Sheet sheetSpecification = new Sheet
{
  Name = "new sheet title",
  FromId = 7679398137620356     // template Id
};

// Sample 1: Omit 'include' parameter
Sheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(
  1656220827314052,               // long workspaceId
  sheetSpecification,
  null                            // IEnumerable<TemplateInclusion> include
);

// Sample 2: Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(
  1656220827314052,               // long workspaceId
  sheetSpecification,
  new TemplateInclusion[] {
    TemplateInclusion.ATTACHMENTS,
    TemplateInclusion.DATA,
    TemplateInclusion.DISCUSSIONS }
);
```

```java
// Specify name for the sheet and Id of the template
Sheet sheet = new Sheet();
sheet.setFromId(7679398137620356L);     // long templateId
sheet.setName("newsheet");

// Sample 1: Omit 'include' parameter
Sheet newSheet = smartsheet.sheetResources().createSheetInWorkspaceFromTemplate(
  1656220827314052L,                  // long workspaceId
  sheetSpecification,
  null                                // EnumSet<SheetTemplateInclusion> includes
);

// Sample 2: Include ATTACHMENTS, DATA, and DISCUSSIONS
Sheet newSheet = smartsheet.sheetResources().createSheetInWorkspaceFromTemplate(
  1656220827314052L,                 // long workspaceId
  sheetSpecification,
  EnumSet.of(
    SheetTemplateInclusion.ATTACHMENTS,
    SheetTemplateInclusion.DATA,
    SheetTemplateInclusion.DISCUSSIONS)
);	
```

```python
response = ss_client.Workspaces.create_sheet_in_workspace_from_template(
  1656220827314052,                   # workspace_id
  ss_client.models.Sheet({
    'name': 'newsheet',
    'from_id': 7679398137620356     # template_id
  })
)
```

```ruby
body = {
  name: 'newsheet',
  from_id: 7679398137620356
}

response = smartsheet.sheets.create_in_workspace_from_template(
  workspace_id: 1656220827314052,
  body: body
)
new_sheet = response[:result]
```

> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet at the top-level of the specified Workspace, from the specified Template. For subfolders, use [Create Sheet in Folder from Template](#create-sheet-in-folder-from-template).

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

## Delete Sheet

> Example Request: Delete Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  id: 1531988831168388 // Id of Sheet
};

// Delete sheet
smartsheet.sheets.deleteSheet(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.DeleteSheet(
  1531988831168388            // long sheetId
);
```

```java
smartsheet.sheetResources().deleteSheet(
  1531988831168388L        // long sheetId
);
```

```python
ss_client.Sheets.delete_sheet(
  1531988831168388)       # sheet_id
```

```ruby
smartsheet.sheets.delete(sheet_id: 1531988831168388)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0
}
```

`DELETE /sheets/{sheetId}`

Deletes the Sheet specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

## Get Sheet Version

> Example Request: Get Sheet Version

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/version \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 1531988831168388
};

// Get sheet version
smartsheet.sheets.getSheetVersion(options)
  .then(function(version) {
    console.log(version);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Integer version = smartsheet.SheetResources.GetSheetVersion(
  1531988831168388            // long sheetId
);
```

```java
Integer version = smartsheet.sheetResources().getSheetVersion(
  1531988831168388L        // long sheetId
);
```

```python
version = ss_client.Sheets.get_sheet_version(
  1531988831168388)       # sheet_id
```

```ruby
version = smartsheet.sheets.get_version(
  sheet_id: 1531988831168388
)
```

> Example Response:

```json
{
    "version": "23"
}
```

`GET /sheets/{sheetId}/version`

Gets the Sheet version without loading the entire Sheet.

The following actions increment Sheet version:
<ul>
<li>add/modify cell value</li>
<li>add/modify row</li>
<li>add/modify Discussion/Comment</li>
<li>change formatting</li>
<li>add/remove/update version attachment</li>
<li>cell updated via cell link</li>
</ul>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | A simple object with only a **version** attribute

## Get Sheet

> Example Request: Get Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  id: 4583173393803140 // Id of Sheet
};

// Get sheet
smartsheet.sheets.getSheet(options)
	.then(function(sheetInfo) {
		console.log(sheetInfo);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Omit all parameters
Sheet sheet = smartsheet.SheetResources.GetSheet(
  9283173393803140,           // long sheetId
  null,                       // IEnumerable<SheetLevelInclusion> includes
  null,                       // IEnumerable<SheetLevelExclusion> excludes
  null,                       // IEnumerable<long> rowIds
  null,                       // IEnumerable<int> rowNumbers
  null,                       // IEnumerable<long> columnIds
  null,                       // Nullable<long> pageSize
  null                        // Nullable<long> page
);
```

```java
// Omit all parameters
Sheet sheet = smartsheet.sheetResources().getSheet(
  9283173393803140L,      // long sheetId
  null,                   // EnumSet<SheetInclusion> includes    
  null,                   // EnumSet<ObjectExclusion> excludes
  null,                   // Set<Long> rowIds
  null,                   // Set<Integer> rowNumbers
  null,                   // Set<Long> columnIds
  null,                   // Integer pageSize
  null                    // Integer page
);
```

```python
sheet = ss_client.Sheets.get_sheet(
  1531988831168388)           # sheet_id
```

```ruby
sheet = smartsheet.sheets.get(
  sheet_id: 1531988831168388
)
```

> Example Response:

```json
{
  "accessLevel": "OWNER",
  "projectSettings": {
    "workingDays": [
      "MONDAY",
      "TUESDAY",
      "WEDNESDAY"
    ],
    "nonWorkingDays": [
      "2018-01-01"
    ],
    "lengthOfDay": 6
  },
  "columns": [
    {
      "id": 4583173393803140,
      "index": 0,
      "primary": true,
      "title": "Primary Column",
      "type": "TEXT_NUMBER",
      "validation": false
    },
    {
      "id": 2331373580117892,
      "index": 1,
      "options": [
        "new",
        "in progress",
        "completed"
      ],
      "title": "status",
      "type": "PICKLIST",
      "validation": true
    }
  ],
  "createdAt": "2012-07-24T18:22:29-07:00",
  "id": 4583173393803140,
  "modifiedAt": "2012-07-24T18:30:52-07:00",
  "name": "sheet 1",
  "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
  "rows": []
}
```

`GET /sheets/{sheetId}`

Gets the Sheet specified in the URL. Returns the Sheet, including Rows, and optionally populated with Discussion and Attachment Objects.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to include in the response.<br/>Supports all [Row Include Flags](#row-include-flags) with the following differences:<ul><li>**attachments**: includes the metadata for sheet-level and row-level attachments</li><li>**crossSheetReferences**: includes the cross-sheet references</li><li>**discussions**: includes sheet-level and row-level discussions</li><li>**filters**: includes [row.filteredOut](#row-object) attribute</li><li>**filterDefinitions**: includes type of filter, operators used, and criteria</li><li>**format**: includes column, row, and cell formatting</li><li>**ownerInfo**: includes owner's email address and user Id</li></ul>Also supports the **source** include flag, which adds the [Source Object](#source-object) indicating which sheet or template the sheet was created from, if any.
  | **exclude** (optional) -- a comma-separated list of elements to <i>not include</i> in the response.<br/><ul><li>**nonexistentCells**: excludes cells that have never contained any data</li><li>**include=format&exclude=nonexistentCells**: excludes cells that have never contained data yet returns those cells if they have formatting or conditional formatting</li><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
  | **columnIds** (optional): a comma-separated list of Column Ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns.
  | **ifVersionAfter** (optional): If version specified is still the current sheet version, then returns an abbreviated Sheet Object with only the sheet **version** property. Otherwise, if the sheet has been modified, returns the complete Sheet Object. Intended to allow clients with a cached copy to make sure they have the latest version.
  | **page** (optional): which page number (1-based) to return.  If not specified, the default value is 1.  If a page number is specified that is greater than the number of total pages, the last page is returned.
  | **pageSize** (optional): number of rows per page to include with the sheet.  If neither **pageSize** nor **page** is specified, returns all rows in the sheet.  If only page is specified, defaults to a page size of 100.
  | **rowIds** (optional): a comma-separated list of Row Ids on which to filter the rows included in the result
  | **rowNumbers** (optional): a comma-separated list of Row numbers on which to filter the rows included in the result.  Non-existent row numbers are ignored.
<%= RETURNS %> | [Sheet Object](#sheet-object), populated according to the specified parameters

## Get Sheet as Excel / PDF / CSV

> Example Request: Get Sheet as Excel

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept: application/vnd.ms-excel" \
-o output.xlsx
```

```javascript
var fs = require("fs")

// Set options
var options = {
  id: 169681224483716 // Id of Sheet
};

// Get sheet
smartsheet.sheets.getSheetAsExcel(options)
  .then(function(fileContents) {
    // Write sheet to file
    fs.writeFile('output.xlsx', fileContents, 'binary', (err) => {
      if (err) throw err;
      console.log('The sheet has been saved!');
    });
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.GetSheetAsExcel(
  4583173393803140,           // long sheetId
  outputStream
);
```

```java
smartsheet.sheetResources().getSheetAsExcel(
  4583173393803140L,       // long sheetId
  outputStream
);
```

```python
ss_client.Sheets.get_sheet_as_excel(
  1531988831168388,           # sheet_id
  download_directory_path)
```

```ruby
file_contents = smartsheet.sheets.get_as_excel(
  sheet_id: 1531988831168388
)

File.open('output.xlsx', 'w') {|f| f.write(file_contents)}
```

> Example Response:

```shell
# See local file named "output.xlsx"
```

```javascript
// See local file named "output.xlsx"
```

```csharp
// Contents of Excel file are written to "outputStream"
```

```java
// Contents of Excel file are written to "outputStream"
```

```python
# download directory contains the downloaded Excel file
```

```ruby
# See local file named "output.xlsx"
```

> Example Request: Get Sheet as PDF

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}?paperSize=A1' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept: application/pdf" 
-o  output.pdf
```

```javascript
var fs = require("fs")

// Set options
var options = {
  id: 169681224483716 // Id of Sheet
};

// Get sheet
smartsheet.sheets.getSheetAsPDF(options)
  .then(function(fileContents) {
    // Write sheet to file
    fs.writeFile('output.pdf', fileContents, 'binary', (err) => {
      if (err) throw err;
      console.log('The sheet has been saved!');
    });
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.GetSheetAsPDF(
  4583173393803140,               // long sheetId
  outputStream,
  PaperSize.A1
);
```

```java
smartsheet.sheetResources().getSheetAsPDF(
  4583173393803140L,       // long sheetId
  outputStream,
  PaperSize.A1
);
```

```python
ss_client.Sheets.get_sheet_as_pdf(
  1531988831168388,           # sheet_id
  download_directory_path,
  'A1')                       # paperSize
```

```ruby
file_contents = smartsheet.sheets.get_as_pdf(
  sheet_id: 1531988831168388
)

File.open('output.pdf', 'w') {|f| f.write(file_contents)}
```

> Example Response:

```shell
# See local file named "output.pdf"
```

```javascript
// See local file named "output.pdf"
```

```csharp
// Contents of PDF file are written to "outputStream"
```

```java
// Contents of PDF file are written to "outputStream"
```

```python
# download directory contains the downloaded PDF file
```

```ruby
# See local file named "output.pdf"
```

> Example Request: Get Sheet as CSV

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept: text/csv" \
-o output.csv
```

```javascript
var fs = require("fs")

// Set options
var options = {
  id: 4583173393803140 // Id of Sheet
};

// Get sheet
smartsheet.sheets.getSheetAsCSV(options)
  .then(function(fileContents) {
    // Write sheet to file
    fs.writeFile('output.csv', fileContents, (err) => {
      if (err) throw err;
      console.log('The sheet has been saved!');
    });
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.GetSheetAsCSV(
  4583173393803140,               // long sheetId
  outputStream
);
```

```java
smartsheet.sheetResources().getSheetAsCSV(
  4583173393803140L,       // long sheetId
  outputStream
);
```

```python
ss_client.Sheets.get_sheet_as_csv(
  1531988831168388,           # sheet_id
  download_directory_path)
```

```ruby
file_contents = smartsheet.sheets.get_as_csv(
  sheet_id: 1531988831168388
)

File.open('output.csv', 'w') {|f| f.write(file_contents)}
```

> Example Response:

```shell
# See local file named "output.csv"
```

```javascript
// See local file named "output.csv"
```

```csharp
// Contents of CSV file are written to "outputStream"
```

```java
// Contents of CSV file are written to "outputStream"
```

```python
# download directory contains the downloaded CSV file
```

```ruby
# See local file named "output.csv"
```

`GET /sheets/{sheetId}`

Gets the Sheet in the format specified, based on the Sheet Id.  

<aside class="notice">Note:<ul><li>For Excel format, only .xlsx output format is supported at this time.</li><li>Gantt chart is not generated at this time.</li></ul></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/pdf</li><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= PARAMETERS %> | **paperSize** (optional) -- applies to PDF only, must be one of:<ul><li>LETTER (default)</li><li>LEGAL</li><li>WIDE (same as 11x17)</li><li>ARCHD</li><li>A4</li><li>A3</li><li>A2</li><li>A1</li><li>A0</li></ul>
<%= RETURNS %> | The file in either Excel, PDF, or CSV format.

## List Org Sheets

<%= partial "snippets/listAllOrgSheets.md.erb" %>

## List Sheets

> Example Request: List Sheets

```shell
curl https://api.smartsheet.com/2.0/sheets \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.sheets.listSheets()
	.then(function(sheetList) {
		console.log(sheetList);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Sample 1: Omit 'include' parameter and pagination parameters
PaginatedResult<Sheet> sheets = smartsheet.SheetResources.ListSheets(
  null,               // IEnumerable<SheetInclusion> includes
  null,               // PaginationParameters
  null                // Nullable<DateTime> modifiedSince
);

// Sample 2: Specify 'include' parameter with value of "SOURCE", and 'includeAll' parameter with value of 'true'
PaginatedResult<Sheet> sheets = smartsheet.SheetResources.ListSheets(
  new SheetInclusion[] { SheetInclusion.SOURCE },
  new PaginationParameters(
    true,           // includeAll
    null,           // int pageSize
    null)           // int page
);
```

```java
// Sample 1: Omit 'include' parameter and pagination parameters
PagedResult<Sheet> sheets = smartsheet.sheetResources().listSheets(
  null,           // EnumSet<SourceInclusion> includes
  null,           // PaginationParameters
  null            // Date modifiedSince
);

// Sample 2: Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters()
  .setIncludeAll(true);

// Specify 'include' parameter with value of "SOURCE", and 'includeAll' parameter with value of 'true'
PagedResult<Sheet> sheets = smartsheet.sheetResources().listSheets(EnumSet.of(SourceInclusion.SOURCE), parameters, modifiedSince);
```

```python
response = ss_client.Sheets.list_sheets(include_all=True)
sheets = response.data
```

```ruby
# Sample 1: Omit 'includeAll' parameter
response = smartsheet.sheets.list
sheets = response[:data]

# Sample 2: Specify 'includeAll' with a value of 'true'
response = smartsheet.sheets.list(params: {includeAll:true })
sheets = response
```

> Example Response:

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"accessLevel": "OWNER",
			"id": 4583173393803140,
        "name": "sheet 1",
        "version": 5,
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJesvSHCQ",
        "createdAt": "2015-06-05T20:05:29Z",
        "modifiedAt": "2015-06-05T20:05:43Z"
		},
		{
			"accessLevel": "OWNER",
			"id": 2331373580117892,
        "name": "sheet 2",
        "version": 86,
			"permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJrthEFTG",
        "createdAt": "2015-06-05T20:05:29Z",
        "modifiedAt": "2015-06-05T20:05:43Z"
		}
	]
}
```

`GET /sheets`

Gets a list of all Sheets that the User has access to in alphabetical order by name. The list contains an abbreviated Sheet Object for each Sheet.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>sheetVersion - current version number of each sheet, should not be combined with pagination</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
 | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Sheet Objects](#sheet-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>source (included only if "source" is specified with the **include** parameter)</li><li>owner (included only if "ownerInfo" is specified with the **include** parameter)</li><li>ownerId (included only if "ownerInfo" is specified with the **include** parameter)</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sheet

> Example Request: Move Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/move \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-d '{ 
  "destinationType": "folder", 
  "destinationId": 7960873114331012, 
}' \
-X POST
```

```javascript
// Set destination information
var body = {
  destinationType: "folder",
  destinationId: 7960873114331012
};

// Set options
var options = {
  sheetId: 4583173393803140,
  body: body
};

// Move sheet
smartsheet.sheets.moveSheet(options)
  .then(function(movedSheet) {
    console.log(movedSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination {
  DestinationId = 7960873114331012,           // long destinationFolderId
  DestinationType = DestinationType.FOLDER,
};

// Move sheet
Sheet sheet = smartsheet.SheetResources.MoveSheet(
  4583173393803140,                           // long sheetId
  destination
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination();
destination.setDestinationType(DestinationType.FOLDER)
  .setDestinationId(7960873114331012L);

// Move sheet
Sheet sheet = smartsheet.sheetResources().moveSheet(
  4583173393803140L,                         // long sheetId
  destination
);
```

```python
sheet = ss_client.Sheets.move_sheet(
  4583173393803140,                       # sheet_id
  ss_client.models.ContainerDestination({
    'destination_type': 'folder',       # folder, workspace, or home
    'destination_id': 7960873114331012  # folder_id
  })
)
```

```ruby
body = {
  destination_type: 'folder',
  destination_id: 7960873114331012
}

sheet = smartsheet.sheets.move(
  sheet_id: 4583173393803140,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 4583173393803140,
    "name": "moved_sheet_name",
    "accessLevel": "OWNER",
    "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /sheets/{sheetId}/move`

Moves the specified Sheet to a new location.

<aside class="notice">When a Sheet that is shared to one or more users and/or groups is moved into or out of a workspace, those <i>sheet-level</i> shares are preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination Object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing a [Sheet Object](#sheet-object) for the moved Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Sheet

### Get Sheet Publish Status

> Example Request: Get Sheet Publish Status

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 4583614634583940
};

// Get sheet publish status
smartsheet.sheets.getPublishStatus(options)
	.then(function(status) {
		console.log(status);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
SheetPublish status = smartsheet.SheetResources.GetPublishStatus(
  4583173393803140            // long sheetId
);
```

```java
SheetPublish status = smartsheet.sheetResources().getPublishStatus(
  4583173393803140L,       // long sheetId
);
```

```python
response = ss_client.Sheets.get_publish_status(
  4583173393803140)       # sheet_id
status = response.result
# status is a ss_client.models.SheetPublish object
```

```ruby
status = smartsheet.sheets.get_publish_status(
  sheet_id: 4583173393803140
)
```

> Example Response:

```json
{
	"readOnlyLiteEnabled": false,
	"readOnlyFullEnabled": true,
	"readWriteEnabled": false,
	"icalEnabled": false,
	"readOnlyFullAccessibleBy": "ALL",
	"readOnlyFullUrl": "https://publish.smartsheet.com/6d35fa6c99334d4892f9591cf6065"
}
```

`GET /sheets/{sheetId}/publish`

Gets the Sheet's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [SheetPublish Object](#sheetpublish-object)

### Set Sheet Publish Status

> Example Request: Set Sheet Publish Status

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"readOnlyLiteEnabled": true,"readOnlyFullEnabled": false,"readWriteEnabled": false,"icalEnabled": false}'
```

```javascript
// Specify publish status
var publishStatus = {
  "readOnlyLiteEnabled": true,
  "readOnlyFullEnabled": false,
  "readWriteEnabled": false,
  "icalEnabled": false
};

// Set options
var options = {
  sheetId: 4583614634583940,
  body: publishStatus
  };

// Set publish status
smartsheet.sheets.setPublishStatus(options)
	.then(function(updatedStatus) {
		console.log(updatedStatus);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify sheet publish status properties
SheetPublish publishSpecification = new SheetPublish
{
  ReadOnlyLiteEnabled = true,
  ReadOnlyFullEnabled = false,
  ReadWriteEnabled = false,
  IcalEnabled = false
};

// Set sheet publish status
SheetPublish updatedStatus = smartsheet.SheetResources.UpdatePublishStatus(
  4583614634583940,       // long sheetId
  publishSpecification
);
```

```java
// Specify sheet publish status properties
SheetPublish publishSpecification = new SheetPublish()
  .setIcalEnabled(false)
  .setReadOnlyFullEnabled(false)
  .setReadWriteEnabled(false)
  .setReadOnlyLiteEnabled(true);

// Set sheet publish status
SheetPublish updatedStatus = smartsheet.sheetResources().updatePublishStatus(
  4583614634583940L,       // long sheetId
  publishSpecification
);
```

```python
# With the Python SDK, if fewer than all four flags are set, current status is retrieved and merged with the flags that _are_ set with this method call.

updated_status = ss_client.Sheets.set_publish_status(
  4583173393803140,       # sheet_id
  ss_client.models.SheetPublish({
    'read_only_lite_enabled': True
  })
)
```

```ruby
body = {
  read_only_lite_enabled: true,
  read_only_full_enabled: true,
  read_only_full_accessible_by: 'ALL',
  read_write_enabled: true,
  read_write_accessible_by: 'ORG',
  ical_enabled: true
}

status = smartsheet.sheets.set_publish_status(
  sheet_id: 4583173393803140,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "icalEnabled": false,
    "readOnlyFullEnabled": false,
    "readOnlyLiteEnabled": true,
    "readOnlyLiteUrl": "http://publish.smartsheet.com/9862638d9c444014b5d7a114d436e99d",
    "readWriteEnabled": false
  }
}
```

`PUT /sheets/{sheetId}/publish`

Sets the publish status of the Sheet and returns the new status, including the URLs of any enabled publishings.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [SheetPublish Object](#sheetpublish-object)
<%= RETURNS %> | [Result Object](#result-object) containing a [SheetPublish Object](#sheetpublish-object)

<aside class="notice">For Read Only, if you do not specify a value for <b>readOnlyFullAccessibleBy</b>, the value defaults to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

<aside class="notice">For Read Write, if you do not specify a value for <b>readWriteAccessibleBy</b>, the value defaults to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

## Search Sheet 

<%= partial "snippets/searchSheet.md.erb" %>

## Send Sheet via Email

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

For details about sending update requests, see [Create Update Request](#create-update-request).

## Share Sheet

For details about Sheet sharing, see [Sheet Sharing](#sheet-sharing).

## Sort Rows in Sheet

> Example Request: Sort Rows in Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/sort \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"sortCriteria": [{"columnId": 4583173393803140, "direction": "DESCENDING"}]}'
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
# Not yet implemented
```

> Example Response:

```json
{
  "accessLevel": "OWNER",
  "projectSettings": {
    "workingDays": [
      "MONDAY",
      "TUESDAY",
      "WEDNESDAY"
    ],
    "nonWorkingDays": [
      "2018-01-01"
    ],
    "lengthOfDay": 6
  },
  "columns": [
    {
      "id": 4583173393803140,
      "index": 0,
      "primary": true,
      "title": "Primary Column",
      "type": "TEXT_NUMBER",
      "validation": false
    },
    {
      "id": 2331373580117892,
      "index": 1,
      "options": [
        "new",
        "in progress",
        "completed"
      ],
      "title": "status",
      "type": "PICKLIST",
      "validation": true
    }
  ],
  "createdAt": "2012-07-24T18:22:29-07:00",
  "id": 4583173393803140,
  "modifiedAt": "2012-07-24T18:30:52-07:00",
  "name": "sheet 1",
  "permalink": "https://app.smartsheet.com/b/home?lx=pWNSDH9itjBXxBzFmyf-5w",
  "rows": []
}
```

`POST /sheets/{sheetId}/sort`

Sorts the rows of a sheet, either in ascending or descending order.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | [SortSpecifier](#sortspecifier-object) with the following attribute:<ul><li>sortCriteria: <a href="#sortcriterion-object">SortCriterion</a> array in priority order. Specifies sort order.</li></ul>
  | (Optional) Any of the relevant parameters or query parameters listed for [Get Sheet](#get-sheet)
<%= RETURNS %> | [Sheet Object](#sheet-object), populated according to the specified parameters

## Update Sheet

> Example Request: Update Sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name":"New Sheet Name", 
  "userSettings": {"criticalPathEnabled": true}, 
  "projectSettings":{ 
    "workingDays": ["MONDAY", "TUESDAY", "WEDNESDAY"], 
    "nonWorkingDays": ["2018-01-01"], 
    "lengthOfDay": 6 
  } \
}'
```

```javascript
// Specify updated sheet properties
var sheet = {
  "name": "New Sheet Name",
  "userSettings": {
    "criticalPathEnabled": true,
  }
};

// Set options
var options = {
  id: 7960873114331012, // Id of Sheet
  body: sheet
  };

// Update sheet
smartsheet.sheets.updateSheet(options)
  .then(function(updatedSheet) {
    console.log(updatedSheet);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify updated sheet properties
Sheet sheetSpecification = new Sheet
{
  Id = 4583173393803140,
  Name = "New Sheet Name",
  UserSettings = new SheetUserSettings{CriticalPathEnabled = true}
};

// Update sheet
Sheet updatedSheet = smartsheet.SheetResources.UpdateSheet(sheetSpecification);
```

```java
// Specify updated sheet properties
Sheet sheetSpecification = new Sheet();
sheetSpecification.setUserSettings(new SheetUserSettings().setCriticalPathEnabled(true))
  .setName("New Sheet Name")
  .setId(7960873114331012L);

// Update sheet
Sheet updatedSheet = smartsheet.sheetResources().updateSheet(sheetSpecification);
```

```python
updated_sheet = ss_client.Sheets.update_sheet(
  4583173393803140,       # sheet_id
  ss_client.models.Sheet({
    'name': 'New Sheet Name',
    'user_settings': ss_client.models.SheetUserSettings({
      'critical_path_enabled': True
    })
  })
)
```

```ruby
body = {
  name: 'New Sheet Name',
  user_settings: {
    critical_path_enabled: true,
    display_summary_tasks: false
  },
  project_settings: {
    working_days: ['MONDAY', 'TUESDAY', 'WEDNESDAY'],
    non_working_days: ['2018-01-01'],
    length_of_day: 6
  }
}

response = smartsheet.sheets.update(
  sheet_id: 4583173393803140,
  body: body
)
updated_sheet = response
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 7960873114331012,
    "name": "New Sheet Name",
    "accessLevel": "OWNER",
    "userSettings": {
      "criticalPathEnabled": true
    },
    "projectSettings": {
      "workingDays": ["MONDAY", "TUESDAY", "WEDNESDAY"]
      "nonWorkingDays": ["2018-01-01"]
      "lengthOfDay": 6
    },
    "permalink": "https://app.smartsheet.com/b/home?lx=RE8LkzA48kPRWTzcgEYOga"
  }
}
```

`PUT /sheets/{sheetId}`

Updates the Sheet specified in the URL.

To modify Sheet contents, see [Add Rows](#add-rows), [Update Rows](#update-rows), [Add Columns](#add-columns), and [Update Column](#update-column).

This operation can be used to update an individual user's sheet settings.  If the request body contains only the **userSettings** attribute, this operation may be performed even if the user
only has read-only access to the sheet (for example, the user has viewer permissions or the sheet is read-only).
 
     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Sheet Object](#sheet-object) limited to the following attributes:<ul><li>name (optional)</li><li>userSettings (optional): [SheetUserSettings Object](#sheetusersettings-object) for updating these user's settings for the sheet</li><li>projectSettings (optional): [ProjectSettings Object](#projectsettings-object), containing at least one of the projectSettings attributes, for updating this sheet's project settings and dependencies.</li></ul>Note the following:<ul><li>Attributes not specified in projectSettings are not updated.</li><li>If projectSettings.nonWorkingDays is specified as an empty array, all non-working days are removed from the project sheet.</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing a [Sheet Object](#sheet-object) for the updated Sheet

## <%= RELATED %>

A Sheet is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Sheet Attachments

For details about working with a Sheet's attachments, see [Attachments](#attachments).

### Sheet Cells

For details about working with a Sheet's cells, see [Cells](#cells).

For details about working with images in cells, see [Cell Images](#cell-images).

### Sheet Columns

For details about working with a Sheet's columns, see [Columns](#columns).

### Sheet Discussions

There are two ways to get discussion-related information for a Sheet:

Operation | Returns
----------|----------|-----------
[Get Sheet](#get-sheet)<br/>(with **include** parameter value "discussions") | Response does *not* contain the Comments that comprise each Discussion.
[List Discussions](#list-discussions)<br/>(with **include** parameter value "comments") |  Response *does* contain the Comments that comprise each Discussion.

For more information about working with a Sheet's discussions, see [Discussions](#discussions).

### Sheet Rows 

For details about working with a Sheet's rows, see [Rows](#rows).


# Sights

Smartsheet Sights(TM) are a collection of widgets that can contain data from a variety of different data sources (for example, Sheets, Reports, or custom data). Sights are now called Dashboards in the UI. 

## <%= OBJECTS %>

### Sight Object

> Example Sight Object:

```json
{
  "id": 2591554075418573,
  "name": "Test",
  "accessLevel": "OWNER",
  "columnCount": 6,
  "widgets": []
}
```

     |     |     |
-----|-----|-----|
**id** | number | Sight Id
**name** | string | Sight Name 
**columnCount** | number | Number of Columns that the Sight contains
**widgets** | [widget](#widget-object)[] | Array of Widget Objects
**favorite** | Boolean | Indicates whether the User has marked the Sight as a favorite
**accessLevel** | string | User's permissions on the Sight. Valid values: <ul><li>OWNER</li> <li>ADMIN</li> <li>VIEWER</li></ul>
**permalink** | string | URL that represents a direct link to the Sight in Smartsheet
**createdAt** | timestamp | Time of creation
**modifiedAt** | timestamp | Time of last modification
**workspace** | [Workspace](#workspace-object) | A Workspace Object, limited to only 2 attributes: <ul><li>id</li> <li>name</li></ul> _Note: this attribute is only present if the Sight resides within a Workspace._

### SightPublish Object

     |     |     |
-----|-----|-----|
**readOnlyFullEnabled** | Boolean | If `true`, a rich version of the Sight is published with the ability to use shortcuts and widget interactions.
**readOnlyFullUrl** | string | URL for 'Read-Only Full' view of the published Sight.<br/>Only returned in a response if **readOnlyFullEnabled** = true.
**readOnlyFullAccessibleBy** | string | Flag to indicate who can access the 'Read-Only Full' view of the published Sight:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the Sight owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.

### Widget Object

> Example Widget Object

```json
{
  "id": 3056651398234562,
  "type": "RICHTEXT",
  "contents": {
    "htmlContent": "<p>This is a test</p>"
  },
  "xPosition": 2,
  "yPosition": 0,
  "width": 2,
  "height": 4,
  "showTitleIcon": false,
  "titleFormat": ",,1,,,,,,,3,,,,,,",
  "version": 1
}
```

     |     |     |
-----|-----|-----|
**id** | number | Widget Id
**title** | string | _(Optional)_ Title of the widget
**showTitle** | Boolean | **True** indicates that the client should display the widget title.  Note that this is independent of the "title" string which may be null or empty.
**showTitleIcon** | Boolean | **True** indicates that the client should display the Sheet icon in the widget title
**titleFormat** | string | [FormatDescriptor](#formatting)
**xPosition** | number | X-coordinate of widget's position on the Sight
**yPosition** | number | Y-coordinate of widget's position on the Sight
**height** | number | Number of Rows that the widget occupies on the Sight
**width** | number | Number of Columns that the widget occupies on the Sight
**version** | int | Widget version number
**type** | string | Type of widget. See table below to see how UI widget names map to type.
**contents** | WidgetContent Object | Data that specifies the contents of the widget. <b>Note:</b> The type of WidgetContent Object (and attributes within) depends on the value of `widget.type`.

     |     |     |
-----|-----|-----|
**UI widget name** | **type string** | **Object**
Chart | CHART | [ChartWidgetContent](#chartwidgetcontent-object) 
Image | IMAGE | [ImageWidgetContent](#imagewidgetcontent-object)
Metric | SHEETSUMMARY | [CellLinkWidgetContent](#celllinkwidgetcontent-object)
Report | GRIDGANTT | [ReportWidgetContent](#reportwidgetcontent-object)
Rich Text | RICHTEXT | [RichTextWidgetContent](#richtextwidgetcontent-object)
Shortcut | SHORTCUTLIST | [ShortcutWidgetContent](#shortcutwidgetcontent-object)
Title | TITLE | [TitleWidgetContent](#titlewidgetcontent-object)

### CellLinkWidgetContent Object

     |     |     |
-----|-----|-----|
hyperlink | [hyperlink](#hyperlink-object) | The widget has **when clicked** attribute set to that hyperlink (if present and non-null)
cellData | [cellData](#celldataitem-object)[] | Array of cellDataItem Objects
column | [column](#column-object)[] | Array of Column Objects

### CellDataItem Object

     |     |     |
-----|-----|-----|
**label** | string | Label for the data point. This is either the column name or a user-provided string
**labelFormat** | string | [formatDescriptor](#formatting)
**objectValue** | A **string**, **number**, or a **Boolean** value | The type of data returned depends on the cell type and the data in the cell
**cell** | [cell](#cell-object) | Cell Object
**valueFormat** | string | [formatDescriptor](#formatting)
**order** | integer | The display order for the CellDataItem
**columnId** | number | Column Id for the cell

### ChartWidgetContent Object

     |     |     |
-----|-----|-----|
**series** | series[] | An array of Series Objects
**axes** | axes[] | An array of Axes Objects
**legend** | string | The location in the widget where Smartsheet renders the legend, for example, **RIGHT**

### ImageWidgetContent Object

     |     |     |
-----|-----|-----|
**privateId** | string | The image private Id
**height** | integer | Original height of the image in pixels
**width** | integer | Original width of the image in pixels
**fileName** | string | Name of the image file
**format** | string | [formatDescriptor](#formatting)

### ReportWidgetContent Object

     |     |     |
-----|-----|-----|
htmlContent | string | HTML snippet to render Report

### RichTextWidgetContent Object

     |     |     |
-----|-----|-----|
html | string | The widget content as HTML </br> </br> The Rich Text widget supports the following subset of HTML tags and CSS Styles: </br></br> <b>HTML</b><ul><li>a - defines a hyperlink</li> <li>br - inserts a single line break</li><li>li - defines a list item</li> <li>ol - defines an ordered list</li> <li>p - defines a paragraph</li> <li>ul - defines an unordered list</li> <li>span - defines a section in a document</li></ul> <b>CSS</b><ul><li>color</li> <li>font-family</li> <li>font-size</li> <li>font-style</li> <li>font-weight</li> <li>text-align</li> <li>text-decoration</li></ul>

### ShortcutWidgetContent Object

     |     |     |
-----|-----|-----|
shortcutData | [shortcutData](#shortcutdataitem-object)[] | An array of ShortcutDataItem Objects

### ShortcutDataItem Object

     |     |     |
-----|-----|-----|
**label** | string | Label for the data point
**labelFormat** | string | [formatDescriptor](#formatting)
**attachmentType** | string | Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, EGNYTE, ONEDRIVE, or SMARTSHEET)
**hyperlink** | [hyperlink](#hyperlink-object) | Hyperlink Object
**order** | integer | The display order for the ShortcutWidgetItem
**mimeType** | string | MIME type if available for attachment type

### TitleWidgetContent Object

     |     |     |
-----|-----|-----|
htmlContent | string | HTML snippet to render Title
backgroundColor | hex | The hex color, for instance #E6F5FE

## Copy Sight

> Example Request: Copy Sight

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/copy \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json"
-d '{ 
  "destinationType": "workspace", 
  "destinationId": 7960873114331012, 
  "newName": "newSightName" 
}' \
-X POST
```

```javascript
// Specify new Sight properties
var body = {
  destinationType: "home",
  newName: "newSightName"
};

// Set options
var options = {
  sightId: 6327127650920324,
  body: body
};

// Copy Sight
smartsheet.sights.copySight(options)
  .then(function(copiedSight) {
    console.log(copiedSight);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination
{
  DestinationId = 3791509922310020,               // long destinationFolderId
  DestinationType = DestinationType.FOLDER,
  NewName = "newSightName"
};

// Copy Sight
Sight sight = smartsheet.SightResources.CopySight(
  6327127650920324,                               // long sightId
  destination
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination()
  .setDestinationType(DestinationType.FOLDER)
  .setDestinationId(3791509922310020L)
  .setNewName("newSightName");

// Copy sight
Sight sight = smartsheet.sightResources().copySight(
  6327127650920324L,                          // long sightId
  destination
);
```

```python
new_sight = ss_client.Sights.copy_sight(
  6327127650920324,                           # sight_id
  ss_client.models.ContainerDestination({
    'destination_type': 'folder',           # folder, workspace, or home
    'destination_id': 3791509922310020,     # folder_id
    'new_name': 'newSightName'
  })
)
```

```ruby
# Specify destination
body = {
  destination_type: 'folder',
  destination_id: 3791509922310020,
  new_name: 'newSightName'
}

# Copy Sight
new_sight = smartsheet.sights.copy(
  sight_id: 6327127650920324,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 4583173393803140,
    "name": "newSightName",
    "accessLevel": "OWNER",
    "permalink": "https://app.smartsheet.com/b/home?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /sights/{sightId}/copy`

Creates a copy of the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination Object](#containerdestination-object)
<%= RETURNS %> | [Result Object](#result-object) containing a [Sight](#sight-object) for the newly created Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>


## Delete Sight

> Example Request: Delete Sight

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
```

```javascript
// Set options
var options = {
  sightId: 5363568917931908
};

// Delete Sight
smartsheet.sights.deleteSight(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SightResources.DeleteSight(
  5077532685952900            // long sheetId
);
```

```java
smartsheet.sightResources().deleteSight(
  3100061023397764L       // long sightId
);
```

```python
ss_client.Sights.delete_sight(3404239197235076)     # sight_id
```

```ruby
smartsheet.sights.delete(
  sight_id: 6327127650920324
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0
}
```

`DELETE /sights/{sightId}`

Deletes the Sight specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result Object](#result-object)

## Get Sight

> Example Request: Get Sight

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sightId: 6327127650920324
};

// Get Sight
smartsheet.sights.getSight(options)
  .then(function(sight) {
    console.log(sight);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Sight sight = smartsheet.SightResources.GetSight(
  6327127650920324        // long sightId
);
```

```java
Sight sight = smartsheet.sightResources().getSight(
  6327127650920324L       // long sightId
);
```

```python
sight = ss_client.Sights.get_sight(
  6327127650920324)     # sightId
```

```ruby
sight = smartsheet.sights.get(
  sight_id: 6327127650920324
)
```

> Example Response:

```json
{
  "id": 2591554075418573,
  "name": "Test",
  "permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJesvSHCQ",
  "createdAt": "2016-01-28T00:24:41Z",
  "modifiedAt": "2016-01-28T20:32:33Z",
  "accessLevel": "OWNER",
  "columnCount": 6,
  "widgets": [
    {
      "id": 3056651398234562,
      "type": "RICHTEXT",
      "contents": {
        "htmlContent": "<p>This is a test</p>"
      },
      "xPosition": 2,
      "yPosition": 0,
      "width": 2,
      "height": 4,
      "showTitleIcon": false,
      "titleFormat": ",,1,,,,,,,3,,,,,,",
      "version": 1
    },
    {
      "id": 48092647672583496,
      "type": "SHORTCUTLIST",
      "contents": {
        "shortcutData": [
          {
            "label": "Sight Data",
            "labelFormat": ",2,,,,,1,,1,,,,,,,",
            "hyperlink": {
              "url": "https://app.smartsheet.com/b/home?lx=m1O5qo7tpM1h23KFxYavIw",
              "sheetId": 692061146243972
            },
            "attachmentType": "SMARTSHEET",
            "order": 0
          }
        ]
      },
      "xPosition": 1,
      "yPosition": 0,
      "width": 1,
      "height": 1,
      "showTitleIcon": false,
      "titleFormat": ",,1,,,,,,,3,,,,,,",
      "version": 1
    }
  ]
}
```

`GET /sights/{sightId}`

Gets the specified Sight.


     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Sight Object](#sight-object)

## List Sights

> Example Request: List Sights

```shell
curl https://api.smartsheet.com/2.0/sights \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.sights.listSights()
  .then(function(sights) {
    console.log(sights.data);
  })
  .catch(function(error) {
    console.log(error);
  })
```

```csharp
PaginatedResult<Sight> sights = smartsheet.SightResources.ListSights(
  null,       // PaginationParameters
  null        // Nullable<DateTime> modifiedSince
);
```

```java
PagedResult<Sight> sights = smartsheet.sightResources().listSights(
  null,       // PaginationParameters
  null        // Date modifiedSince
);
```

```python
response = ss_client.Sights.list_sights(include_all=True)
sights = response.data
```

```ruby
response = smartsheet.sights.list
sights = response[:data]
```

> Example Response:

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
    {
      "id": 2331373580117892,
      "name": "Sales Sight",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJesvSHCQ",
      "createdAt": "2016-01-28T00:24:41Z",
      "modifiedAt": "2016-01-28T20:32:33Z"
    },
    {
      "id": 7397923160909700,
      "name": "Sight #2",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=xUefSOIYmn07iJJrthEFTG",
      "createdAt": "2016-01-28T01:17:51Z",
      "modifiedAt": "2016-01-28T20:32:27Z"
    }
	]
}
```

`GET /sights`

Gets a list of all Sights that the User has access to.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult Object](#indexresult-object) containing an array of [Sight Objects](#sight-object) limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sight

> Example Request: Move Sight

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/move \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json"
-d '{ 
  "destinationType": "folder", 
  "destinationId": workspace_or_folder_id 
}' \
-X POST
```

```javascript
// Set destination
var body = {
  destinationType: "folder",
  destinationId: 8460057768683396
};

// Set options
var options = {
  sightId: 5077532685952900,
  body: body
};

// Move Sight
smartsheet.sights.moveSight(options)
  .then(function(movedSight) {
    console.log(movedSight);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination
{
  DestinationId = 8460057768683396,               // long destinationFolderId
  DestinationType = DestinationType.FOLDER
};

// Move Sight
Sight sight = smartsheet.SightResources.MoveSight(
  5077532685952900,                               // long sightId
  destination
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination()
  .setDestinationType(DestinationType.FOLDER)
  .setDestinationId(7960873114331012L);

// Move sight
Sight sight = smartsheet.sightResources().moveSight(
  4583173393803140L,                          // long sightId
  destination
);
```

```python
response = ss_client.Sights.move_sight(
  5363568917931908,                           # sight_id
  ss_client.models.ContainerDestination({
    'destination_type': 'folder',           # folder, workspace, or home
    'destination_id': 8460057768683396      # destination folder_id
  })
)
```

```ruby
# Specify destination
body = {
  destination_type: 'folder',
  destination_id: 8460057768683396
}

# Move Sight
response = smartsheet.sights.move(
  sight_id: 5363568917931908,
  body: body
)
moved_sight = response[:result]
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 4583173393803140,
    "name": "moved_Sight_name",
    "accessLevel": "OWNER",
    "permalink": "https://app.smartsheet.com/b/home?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /sights/{sightId}/move`

Moves the specified Sight to a new location.

<aside class="notice">When a Sight that is shared to one or more users and/or groups is moved into or out of a workspace, those <i>Sight-level</i> shares are preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination Object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing a [Sight Object](#sight-object) for the moved Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Sight

### Get Sight Publish Status

> Example Request: Get Sight Publish Status

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sightId: 970160971507588
};

// Get Sight publish status
smartsheet.sights.getSightPublishStatus(options)
  .then(function(status) {
    console.log(status);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
status = ss_client.Sights.get_publish_status(
  5363568917931908)       # sight_id
```

```ruby
status = smartsheet.sights.get_publish_status(
  sight_id: 970160971507588
)
```

> Example Response:

```json
{
  "readOnlyFullEnabled": true,
  "readOnlyFullAccessibleBy": "ALL",
  "readOnlyFullUrl": "https://publish.smartsheet.com/6d35fa6c99334d4892f9591cf6065"
}
```

`GET /sights/{sightId}/publish`

Gets the Sight 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [SightPublish Object](#sightpublish-object)

### Set Sight Publish Status

> Example Request: Set Sight Publish Status

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId}/publish \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json"
-X PUT
-d '{ 
  "readOnlyFullEnabled": true, 
  "readOnlyFullAccessibleBy": "ALL" 
}' \
```

```javascript
// Specify property to change
var body = {
  readOnlyFullEnabled: false
};

// Set options
var options = {
  sightId: 5363568917931908,
  body: body
};

// Set Sight publish status
smartsheet.sights.setSightPublishStatus(options)
  .then(function(newStatus) {
    console.log(newStatus);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
response = ss_client.Sights.set_publish_status(
  5363568917931908,       # sight_id
  ss_client.models.SightPublish({
    'read_only_full_enabled': True
  })
)
```

```ruby
# Set options
body = {
  read_only_full_enabled: true,
  read_only_full_accessible_by: 'ALL'
}

# Set Sight publish status
response = smartsheet.sights.set_publish_status(
  sight_id: 5363568917931908,
  body: body
)
status = response[:result]
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "readOnlyFullEnabled": true,
    "readOnlyFullAccessibleBy": "ORG",
    "readOnlyFullUrl": "http://publish.smartsheet.com/9862638d9c444014b5d7a114d436e99d"
  }
}
```

`PUT /sights/{sightId}/publish`

Publishes or unpublishes a Sight.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [SightPublish Object](#sightpublish-object) limited to the following attributes:<ul><li>**readOnlyFullEnabled** (required)</li><li>**readOnlyFullAccessibleBy** (optional) - set to either "ALL" or "ORG", when **readOnlyFullEnabled**=true.</li></ul>To publish the Sight, set **readOnlyFullEnabled** to `true`. To unpublish the Sight, set **readOnlyFullEnabled** to `false`.
<%= RETURNS %> | [Result Object](#result-object) containing a [SightPublish Object](#sightpublish-object)

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, the value of <b>readOnlyFullAccessibleBy</b> defaults to the organization-level 'Sight Publishing' setting (if the Sight owner belongs to an organization) or to "ALL" (if the Sight owner does not belong to an organization).</aside>

## Share Sight

For details about Sight sharing, see [Sight Sharing](#sight-sharing).

## Update Sight

> Example Request: Update Sight

```shell
curl https://api.smartsheet.com/2.0/sights/{sightId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "New Sight Name"}'
```

```javascript
// Set property to change
var body = {
  name: "New Sight Name"
};

// Set options
var options = {
  sightId: 5363568917931908,
  body: body
};

// Update Sight
smartsheet.sights.updateSight(options)
  .then(function(updatedSight) {
    console.log(updatedSight);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
updated_sight = ss_client.Sights.update_sight(
  5363568917931908,           # sight_id
  ss_client.models.Sight({
    'name': 'New Sight Name'
  })
)
```

```ruby
# Specify property to change
body = {
  name: 'New Sight Name'
}

# Update Sight
response = smartsheet.sights.update(
  sight_id: 5363568917931908,
  body: body
)
updated_sight = response[:result]
```

> Example Response:

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 5363568917931908,
    "name": "New Sight Name",
    "accessLevel": "OWNER",
    "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
  }
}
```

`PUT /sights/{sightId}`

Updates (renames) the specified Sight. 

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Sight Object](#sight-object) limited to the following attribute:<ul><li>name (string)</li></ul>
<%= RETURNS %> | [Result Object](#result-object) containing the updated [Sight Object](#sight-object)
